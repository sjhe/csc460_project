
out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00001054  000010e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001364  00800200  00800200  000010e8  2**0
                  ALLOC
  3 .stab         000032f4  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000190b  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005ce7  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__vector_32>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	0c 04       	cpc	r0, r12
      e6:	b7 03       	fmuls	r19, r23
      e8:	e3 03       	fmuls	r22, r19
      ea:	54 04       	cpc	r5, r4
      ec:	0c 04       	cpc	r0, r12
      ee:	e6 03       	fmuls	r22, r22
      f0:	5a 04       	cpc	r5, r10
      f2:	61 04       	cpc	r6, r1
      f4:	b2 04       	cpc	r11, r2
      f6:	e4 04       	cpc	r14, r4

000000f8 <__trampolines_start>:
      f8:	0c 94 b2 04 	jmp	0x964	; 0x964 <OS_Start+0x294>
      fc:	0c 94 b7 03 	jmp	0x76e	; 0x76e <OS_Start+0x9e>
     100:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <Task_Terminate>
     104:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <OS_Start+0x2f8>
     108:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <OS_Start+0x1d8>
     10c:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <OS_Start+0xfc>
     110:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <OS_Start+0xf6>
     114:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <OS_Start+0x1f2>
     118:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <OS_Start+0x1e4>
     11c:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <Peng>
     120:	0c 94 0c 04 	jmp	0x818	; 0x818 <OS_Start+0x148>
     124:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <a_main>
     128:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <Idle>

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d1 e2       	ldi	r29, 0x21	; 33
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61
     138:	00 e0       	ldi	r16, 0x00	; 0
     13a:	0c bf       	out	0x3c, r16	; 60

0000013c <__do_clear_bss>:
     13c:	15 e1       	ldi	r17, 0x15	; 21
     13e:	a0 e0       	ldi	r26, 0x00	; 0
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a4 36       	cpi	r26, 0x64	; 100
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 f6 07 	call	0xfec	; 0xfec <main>
     150:	0c 94 28 08 	jmp	0x1050	; 0x1050 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     158:	0f 92       	push	r0
     15a:	1f 92       	push	r1
     15c:	2f 92       	push	r2
     15e:	3f 92       	push	r3
     160:	4f 92       	push	r4
     162:	5f 92       	push	r5
     164:	6f 92       	push	r6
     166:	7f 92       	push	r7
     168:	8f 92       	push	r8
     16a:	9f 92       	push	r9
     16c:	af 92       	push	r10
     16e:	bf 92       	push	r11
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	2f 93       	push	r18
     17e:	3f 93       	push	r19
     180:	4f 93       	push	r20
     182:	5f 93       	push	r21
     184:	6f 93       	push	r22
     186:	7f 93       	push	r23
     188:	8f 93       	push	r24
     18a:	9f 93       	push	r25
     18c:	af 93       	push	r26
     18e:	bf 93       	push	r27
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	ef 93       	push	r30
     196:	ff 93       	push	r31
     198:	fc b7       	in	r31, 0x3c	; 60
     19a:	ff 93       	push	r31
     19c:	ff b7       	in	r31, 0x3f	; 63
     19e:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     1a0:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     1a2:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     1a4:	e0 93 62 15 	sts	0x1562, r30
        sts  KernelSp+1, r31
     1a8:	f0 93 63 15 	sts	0x1563, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     1ac:	e0 91 60 15 	lds	r30, 0x1560
        lds  r31, CurrentSp+1
     1b0:	f0 91 61 15 	lds	r31, 0x1561
        out  SPL, r30
     1b4:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1b6:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1b8:	ff 91       	pop	r31
     1ba:	ff bf       	out	0x3f, r31	; 63
     1bc:	ff 91       	pop	r31
     1be:	fc bf       	out	0x3c, r31	; 60
     1c0:	ff 91       	pop	r31
     1c2:	ef 91       	pop	r30
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	bf 91       	pop	r27
     1ca:	af 91       	pop	r26
     1cc:	9f 91       	pop	r25
     1ce:	8f 91       	pop	r24
     1d0:	7f 91       	pop	r23
     1d2:	6f 91       	pop	r22
     1d4:	5f 91       	pop	r21
     1d6:	4f 91       	pop	r20
     1d8:	3f 91       	pop	r19
     1da:	2f 91       	pop	r18
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	bf 90       	pop	r11
     1ea:	af 90       	pop	r10
     1ec:	9f 90       	pop	r9
     1ee:	8f 90       	pop	r8
     1f0:	7f 90       	pop	r7
     1f2:	6f 90       	pop	r6
     1f4:	5f 90       	pop	r5
     1f6:	4f 90       	pop	r4
     1f8:	3f 90       	pop	r3
     1fa:	2f 90       	pop	r2
     1fc:	1f 90       	pop	r1
     1fe:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     200:	18 95       	reti

00000202 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     202:	0f 92       	push	r0
     204:	1f 92       	push	r1
     206:	2f 92       	push	r2
     208:	3f 92       	push	r3
     20a:	4f 92       	push	r4
     20c:	5f 92       	push	r5
     20e:	6f 92       	push	r6
     210:	7f 92       	push	r7
     212:	8f 92       	push	r8
     214:	9f 92       	push	r9
     216:	af 92       	push	r10
     218:	bf 92       	push	r11
     21a:	cf 92       	push	r12
     21c:	df 92       	push	r13
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	2f 93       	push	r18
     228:	3f 93       	push	r19
     22a:	4f 93       	push	r20
     22c:	5f 93       	push	r21
     22e:	6f 93       	push	r22
     230:	7f 93       	push	r23
     232:	8f 93       	push	r24
     234:	9f 93       	push	r25
     236:	af 93       	push	r26
     238:	bf 93       	push	r27
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	ef 93       	push	r30
     240:	ff 93       	push	r31
     242:	fc b7       	in	r31, 0x3c	; 60
     244:	ff 93       	push	r31
     246:	ff b7       	in	r31, 0x3f	; 63
     248:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     24a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     24c:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     24e:	e0 93 60 15 	sts	0x1560, r30
        sts  CurrentSp+1, r31
     252:	f0 93 61 15 	sts	0x1561, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     256:	e0 91 62 15 	lds	r30, 0x1562
        lds  r31, KernelSp+1
     25a:	f0 91 63 15 	lds	r31, 0x1563
        out  SPL, r30
     25e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     260:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     262:	ff 91       	pop	r31
     264:	ff bf       	out	0x3f, r31	; 63
     266:	ff 91       	pop	r31
     268:	fc bf       	out	0x3c, r31	; 60
     26a:	ff 91       	pop	r31
     26c:	ef 91       	pop	r30
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	bf 91       	pop	r27
     274:	af 91       	pop	r26
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	7f 91       	pop	r23
     27c:	6f 91       	pop	r22
     27e:	5f 91       	pop	r21
     280:	4f 91       	pop	r20
     282:	3f 91       	pop	r19
     284:	2f 91       	pop	r18
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	df 90       	pop	r13
     290:	cf 90       	pop	r12
     292:	bf 90       	pop	r11
     294:	af 90       	pop	r10
     296:	9f 90       	pop	r9
     298:	8f 90       	pop	r8
     29a:	7f 90       	pop	r7
     29c:	6f 90       	pop	r6
     29e:	5f 90       	pop	r5
     2a0:	4f 90       	pop	r4
     2a2:	3f 90       	pop	r3
     2a4:	2f 90       	pop	r2
     2a6:	1f 90       	pop	r1
     2a8:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     2aa:	08 95       	ret

000002ac <Idle>:
 * Save r31 and SREG on stack, disable interrupts, then save
 * the rest of the registers on the stack. In the locations this macro
 * is used, the interrupts need to be disabled, or they already are disabled.
 */

static void Idle(){
     2ac:	ff cf       	rjmp	.-2      	; 0x2ac <Idle>

000002ae <Enqueue>:
*
* @param queue_ptr the queue to insert in
* @param task_to_add the task descriptor to add
*/
static void Enqueue(queue_t* queue_ptr, PD* p)
{
     2ae:	fc 01       	movw	r30, r24
	p->next = NULL;
     2b0:	db 01       	movw	r26, r22
     2b2:	aa 5e       	subi	r26, 0xEA	; 234
     2b4:	be 4f       	sbci	r27, 0xFE	; 254
     2b6:	1d 92       	st	X+, r1
     2b8:	1c 92       	st	X, r1

	if (queue_ptr->head == NULL)
     2ba:	80 81       	ld	r24, Z
     2bc:	91 81       	ldd	r25, Z+1	; 0x01
     2be:	89 2b       	or	r24, r25
     2c0:	19 f4       	brne	.+6      	; 0x2c8 <Enqueue+0x1a>
	{
		/* empty queue */
		queue_ptr->head = p;
     2c2:	71 83       	std	Z+1, r23	; 0x01
     2c4:	60 83       	st	Z, r22
     2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <Enqueue+0x28>
		queue_ptr->tail = p;
	}
	else
	{
		/* put task at the back of the queue */
		queue_ptr->tail->next = p;
     2c8:	a2 81       	ldd	r26, Z+2	; 0x02
     2ca:	b3 81       	ldd	r27, Z+3	; 0x03
     2cc:	aa 5e       	subi	r26, 0xEA	; 234
     2ce:	be 4f       	sbci	r27, 0xFE	; 254
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	7c 93       	st	X, r23
     2d4:	6e 93       	st	-X, r22
		queue_ptr->tail = p;
     2d6:	73 83       	std	Z+3, r23	; 0x03
     2d8:	62 83       	std	Z+2, r22	; 0x02
     2da:	08 95       	ret

000002dc <Task_Terminate>:
/**
  * The calling task terminates itself.
  */
void Task_Terminate()
{
	if (KernelActive) 
     2dc:	80 91 d4 03 	lds	r24, 0x03D4
     2e0:	90 91 d5 03 	lds	r25, 0x03D5
     2e4:	89 2b       	or	r24, r25
     2e6:	b1 f0       	breq	.+44     	; 0x314 <Task_Terminate+0x38>
	{
		Disable_Interrupt();
     2e8:	f8 94       	cli
		Tasks--;
     2ea:	80 91 d2 03 	lds	r24, 0x03D2
     2ee:	90 91 d3 03 	lds	r25, 0x03D3
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	90 93 d3 03 	sts	0x03D3, r25
     2f8:	80 93 d2 03 	sts	0x03D2, r24
		Cp->request = TERMINATE;
     2fc:	e0 91 d6 03 	lds	r30, 0x03D6
     300:	f0 91 d7 03 	lds	r31, 0x03D7
     304:	ee 5e       	subi	r30, 0xEE	; 238
     306:	fe 4f       	sbci	r31, 0xFE	; 254
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	91 83       	std	Z+1, r25	; 0x01
     30e:	80 83       	st	Z, r24
		Enter_Kernel();
     310:	0c 94 01 01 	jmp	0x202	; 0x202 <Enter_Kernel>
     314:	08 95       	ret

00000316 <EnqueuePeriodic.constprop.5>:
* @param queue_ptr the queue to insert in
* @param task_to_add the task descriptor to add
*/
static void EnqueuePeriodic(queue_t* queue_ptr, PD* p)
{
	if (queue_ptr->head == NULL)
     316:	20 91 04 02 	lds	r18, 0x0204
     31a:	30 91 05 02 	lds	r19, 0x0205
     31e:	21 15       	cp	r18, r1
     320:	31 05       	cpc	r19, r1
     322:	49 f0       	breq	.+18     	; 0x336 <EnqueuePeriodic.constprop.5+0x20>
	else
	{
		PD* cp_curr = queue_ptr->head;
		PD* cp_prev = NULL;

		while (cp_curr != NULL && p->next_start > cp_curr->next_start)
     324:	fc 01       	movw	r30, r24
     326:	e6 5f       	subi	r30, 0xF6	; 246
     328:	fe 4f       	sbci	r31, 0xFE	; 254
     32a:	01 90       	ld	r0, Z+
     32c:	f0 81       	ld	r31, Z
     32e:	e0 2d       	mov	r30, r0
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	13 c0       	rjmp	.+38     	; 0x35c <EnqueuePeriodic.constprop.5+0x46>
*/
static void EnqueuePeriodic(queue_t* queue_ptr, PD* p)
{
	if (queue_ptr->head == NULL)
	{
		queue_ptr->head = p;
     336:	90 93 05 02 	sts	0x0205, r25
     33a:	80 93 04 02 	sts	0x0204, r24
		queue_ptr->tail = p;
     33e:	90 93 07 02 	sts	0x0207, r25
     342:	80 93 06 02 	sts	0x0206, r24
     346:	27 c0       	rjmp	.+78     	; 0x396 <EnqueuePeriodic.constprop.5+0x80>
		PD* cp_prev = NULL;

		while (cp_curr != NULL && p->next_start > cp_curr->next_start)
		{
			cp_prev = cp_curr;
			cp_curr = cp_curr->next;
     348:	d9 01       	movw	r26, r18
     34a:	aa 5e       	subi	r26, 0xEA	; 234
     34c:	be 4f       	sbci	r27, 0xFE	; 254
     34e:	6d 91       	ld	r22, X+
     350:	7c 91       	ld	r23, X
	else
	{
		PD* cp_curr = queue_ptr->head;
		PD* cp_prev = NULL;

		while (cp_curr != NULL && p->next_start > cp_curr->next_start)
     352:	61 15       	cp	r22, r1
     354:	71 05       	cpc	r23, r1
     356:	81 f1       	breq	.+96     	; 0x3b8 <EnqueuePeriodic.constprop.5+0xa2>
     358:	a9 01       	movw	r20, r18
		{
			cp_prev = cp_curr;
			cp_curr = cp_curr->next;
     35a:	9b 01       	movw	r18, r22
	else
	{
		PD* cp_curr = queue_ptr->head;
		PD* cp_prev = NULL;

		while (cp_curr != NULL && p->next_start > cp_curr->next_start)
     35c:	d9 01       	movw	r26, r18
     35e:	a6 5f       	subi	r26, 0xF6	; 246
     360:	be 4f       	sbci	r27, 0xFE	; 254
     362:	6d 91       	ld	r22, X+
     364:	7c 91       	ld	r23, X
     366:	6e 17       	cp	r22, r30
     368:	7f 07       	cpc	r23, r31
     36a:	70 f3       	brcs	.-36     	; 0x348 <EnqueuePeriodic.constprop.5+0x32>
			cp_prev = cp_curr;
			cp_curr = cp_curr->next;
		}

		// insert at head of queue
		if (cp_prev == NULL)
     36c:	41 15       	cp	r20, r1
     36e:	51 05       	cpc	r21, r1
     370:	29 f4       	brne	.+10     	; 0x37c <EnqueuePeriodic.constprop.5+0x66>
		{
			queue_ptr->head = p;
     372:	90 93 05 02 	sts	0x0205, r25
     376:	80 93 04 02 	sts	0x0204, r24
     37a:	18 c0       	rjmp	.+48     	; 0x3ac <EnqueuePeriodic.constprop.5+0x96>
			p->next = cp_curr;
		}
		else if (cp_curr == NULL)
     37c:	21 15       	cp	r18, r1
     37e:	31 05       	cpc	r19, r1
     380:	81 f4       	brne	.+32     	; 0x3a2 <EnqueuePeriodic.constprop.5+0x8c>
     382:	9a 01       	movw	r18, r20
		{
			queue_ptr->tail = p;
     384:	90 93 07 02 	sts	0x0207, r25
     388:	80 93 06 02 	sts	0x0206, r24
			cp_prev->next = p;
     38c:	f9 01       	movw	r30, r18
     38e:	ea 5e       	subi	r30, 0xEA	; 234
     390:	fe 4f       	sbci	r31, 0xFE	; 254
     392:	91 83       	std	Z+1, r25	; 0x01
     394:	80 83       	st	Z, r24
			p->next = NULL;
     396:	fc 01       	movw	r30, r24
     398:	ea 5e       	subi	r30, 0xEA	; 234
     39a:	fe 4f       	sbci	r31, 0xFE	; 254
     39c:	11 82       	std	Z+1, r1	; 0x01
     39e:	10 82       	st	Z, r1
     3a0:	08 95       	ret
		}
		else
		{
			cp_prev->next = p;
     3a2:	fa 01       	movw	r30, r20
     3a4:	ea 5e       	subi	r30, 0xEA	; 234
     3a6:	fe 4f       	sbci	r31, 0xFE	; 254
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	80 83       	st	Z, r24
			p->next = cp_curr;
     3ac:	fc 01       	movw	r30, r24
     3ae:	ea 5e       	subi	r30, 0xEA	; 234
     3b0:	fe 4f       	sbci	r31, 0xFE	; 254
     3b2:	31 83       	std	Z+1, r19	; 0x01
     3b4:	20 83       	st	Z, r18
     3b6:	08 95       	ret
			cp_prev = cp_curr;
			cp_curr = cp_curr->next;
		}

		// insert at head of queue
		if (cp_prev == NULL)
     3b8:	21 15       	cp	r18, r1
     3ba:	31 05       	cpc	r19, r1
     3bc:	19 f7       	brne	.-58     	; 0x384 <EnqueuePeriodic.constprop.5+0x6e>
     3be:	d9 cf       	rjmp	.-78     	; 0x372 <EnqueuePeriodic.constprop.5+0x5c>

000003c0 <Kernel_Create_Task_At>:
	sp = (unsigned char*)&(p->workSpace[WORKSPACE - 1]);

	/*----BEGIN of NEW CODE----*/
	//Initialize the workspace (i.e., stack) and PD here!
	//Clear the contents of the workspace
	memset(&(p->workSpace), 0, WORKSPACE);
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	31 e0       	ldi	r19, 0x01	; 1
     3c4:	fc 01       	movw	r30, r24
     3c6:	a9 01       	movw	r20, r18
     3c8:	11 92       	st	Z+, r1
     3ca:	41 50       	subi	r20, 0x01	; 1
     3cc:	50 40       	sbci	r21, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <Kernel_Create_Task_At+0x8>
	//by most significant).  This is because the "return" assembly instructions 
	//(rtn and rti) pop addresses off in BIG ENDIAN (most sig. first, least sig. 
	//second), even though the AT90 is LITTLE ENDIAN machine.

	//Store terminate at the bottom of stack to protect against stack underrun.
	*(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
     3d0:	fc 01       	movw	r30, r24
     3d2:	e1 50       	subi	r30, 0x01	; 1
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	2e e6       	ldi	r18, 0x6E	; 110
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	20 83       	st	Z, r18
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
     3dc:	fc 01       	movw	r30, r24
     3de:	e2 50       	subi	r30, 0x02	; 2
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	30 83       	st	Z, r19
	*(unsigned char *)sp-- = 0;
     3e4:	fc 01       	movw	r30, r24
     3e6:	e3 50       	subi	r30, 0x03	; 3
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	10 82       	st	Z, r1
	//Place return address of function at bottom of stack
	*(unsigned char *)sp-- = ((unsigned int)new_task_args.code) & 0xff;
     3ec:	20 91 22 03 	lds	r18, 0x0322
     3f0:	30 91 23 03 	lds	r19, 0x0323
     3f4:	fc 01       	movw	r30, r24
     3f6:	e4 50       	subi	r30, 0x04	; 4
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	20 83       	st	Z, r18
	*(unsigned char *)sp-- = (((unsigned int)new_task_args.code) >> 8) & 0xff;
     3fc:	20 91 22 03 	lds	r18, 0x0322
     400:	30 91 23 03 	lds	r19, 0x0323
     404:	fc 01       	movw	r30, r24
     406:	e5 50       	subi	r30, 0x05	; 5
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	30 83       	st	Z, r19

	*(unsigned char *)sp-- = 0;
     40c:	fc 01       	movw	r30, r24
     40e:	e6 50       	subi	r30, 0x06	; 6
     410:	ff 4f       	sbci	r31, 0xFF	; 255
     412:	10 82       	st	Z, r1
	//Place stack pointer at top of stack
	sp = sp - 34;

	p->sp = sp;    /* stack pointer into the "workSpace" */
     414:	fc 01       	movw	r30, r24
     416:	f3 95       	inc	r31
	*(unsigned char *)sp-- = ((unsigned int)new_task_args.code) & 0xff;
	*(unsigned char *)sp-- = (((unsigned int)new_task_args.code) >> 8) & 0xff;

	*(unsigned char *)sp-- = 0;
	//Place stack pointer at top of stack
	sp = sp - 34;
     418:	9c 01       	movw	r18, r24
     41a:	29 52       	subi	r18, 0x29	; 41
     41c:	3f 4f       	sbci	r19, 0xFF	; 255

	p->sp = sp;    /* stack pointer into the "workSpace" */
     41e:	31 83       	std	Z+1, r19	; 0x01
     420:	20 83       	st	Z, r18
	p->code = new_task_args.code;		/* function to be executed as a task */
     422:	20 91 22 03 	lds	r18, 0x0322
     426:	30 91 23 03 	lds	r19, 0x0323
     42a:	fc 01       	movw	r30, r24
     42c:	e8 5f       	subi	r30, 0xF8	; 248
     42e:	fe 4f       	sbci	r31, 0xFE	; 254
     430:	31 83       	std	Z+1, r19	; 0x01
     432:	20 83       	st	Z, r18
	p->request = NONE;
     434:	fc 01       	movw	r30, r24
     436:	ee 5e       	subi	r30, 0xEE	; 238
     438:	fe 4f       	sbci	r31, 0xFE	; 254
     43a:	11 82       	std	Z+1, r1	; 0x01
     43c:	10 82       	st	Z, r1
	p->state = READY;
     43e:	fc 01       	movw	r30, r24
     440:	ed 5f       	subi	r30, 0xFD	; 253
     442:	fe 4f       	sbci	r31, 0xFE	; 254
     444:	22 e0       	ldi	r18, 0x02	; 2
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	31 83       	std	Z+1, r19	; 0x01
     44a:	20 83       	st	Z, r18
	p->level = new_task_args.level;
     44c:	20 91 21 03 	lds	r18, 0x0321
     450:	fc 01       	movw	r30, r24
     452:	e9 5f       	subi	r30, 0xF9	; 249
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	20 83       	st	Z, r18

	/* ---- Need to add switch statement for handling ----
	 * ---- PERIODIC | SYSTEM | RR                    ----
	 */
	switch (new_task_args.level) 
     458:	20 91 21 03 	lds	r18, 0x0321
     45c:	22 30       	cpi	r18, 0x02	; 2
     45e:	91 f0       	breq	.+36     	; 0x484 <Kernel_Create_Task_At+0xc4>
     460:	18 f4       	brcc	.+6      	; 0x468 <Kernel_Create_Task_At+0xa8>
     462:	21 30       	cpi	r18, 0x01	; 1
     464:	51 f0       	breq	.+20     	; 0x47a <Kernel_Create_Task_At+0xba>
     466:	08 95       	ret
     468:	23 30       	cpi	r18, 0x03	; 3
     46a:	19 f0       	breq	.+6      	; 0x472 <Kernel_Create_Task_At+0xb2>
     46c:	24 30       	cpi	r18, 0x04	; 4
     46e:	81 f1       	breq	.+96     	; 0x4d0 <Kernel_Create_Task_At+0x110>
     470:	08 95       	ret
	{
	case SYSTEM:
		Enqueue(&system_queue, p);
     472:	bc 01       	movw	r22, r24
     474:	8c e0       	ldi	r24, 0x0C	; 12
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	03 c0       	rjmp	.+6      	; 0x480 <Kernel_Create_Task_At+0xc0>
		break;
	case RR:
		Enqueue(&rr_queue, p);
     47a:	bc 01       	movw	r22, r24
     47c:	88 e0       	ldi	r24, 0x08	; 8
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <Enqueue>
		break;
	case PERIODIC:
		p->period 				 =  new_task_args.period;
     484:	20 91 2a 03 	lds	r18, 0x032A
     488:	30 91 2b 03 	lds	r19, 0x032B
     48c:	fc 01       	movw	r30, r24
     48e:	e0 5f       	subi	r30, 0xF0	; 240
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	31 83       	std	Z+1, r19	; 0x01
     494:	20 83       	st	Z, r18
		p->wcet						 =  new_task_args.wcet;
     496:	20 91 26 03 	lds	r18, 0x0326
     49a:	30 91 27 03 	lds	r19, 0x0327
     49e:	fc 01       	movw	r30, r24
     4a0:	e4 5f       	subi	r30, 0xF4	; 244
     4a2:	fe 4f       	sbci	r31, 0xFE	; 254
     4a4:	31 83       	std	Z+1, r19	; 0x01
     4a6:	20 83       	st	Z, r18
		p->next_start			 =  new_task_args.next_start;
     4a8:	20 91 24 03 	lds	r18, 0x0324
     4ac:	30 91 25 03 	lds	r19, 0x0325
     4b0:	fc 01       	movw	r30, r24
     4b2:	e6 5f       	subi	r30, 0xF6	; 246
     4b4:	fe 4f       	sbci	r31, 0xFE	; 254
     4b6:	31 83       	std	Z+1, r19	; 0x01
     4b8:	20 83       	st	Z, r18
		p->ticks_remaining =  new_task_args.ticks_remaining ;
     4ba:	20 91 28 03 	lds	r18, 0x0328
     4be:	30 91 29 03 	lds	r19, 0x0329
     4c2:	fc 01       	movw	r30, r24
     4c4:	e2 5f       	subi	r30, 0xF2	; 242
     4c6:	fe 4f       	sbci	r31, 0xFE	; 254
     4c8:	31 83       	std	Z+1, r19	; 0x01
     4ca:	20 83       	st	Z, r18
		EnqueuePeriodic(&periodic_queue , p);
     4cc:	0c 94 8b 01 	jmp	0x316	; 0x316 <EnqueuePeriodic.constprop.5>
		break;
	case IDLE:
		idle_process = p;
     4d0:	90 93 5f 15 	sts	0x155F, r25
     4d4:	80 93 5e 15 	sts	0x155E, r24
     4d8:	08 95       	ret

000004da <OS_Abort>:
		Kernel_Main_Loop();   /* main loop of the Kernel*/
	}
}

void OS_Abort(unsigned int error)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
	int i = 0;
	switch (error)
     4de:	82 30       	cpi	r24, 0x02	; 2
     4e0:	91 05       	cpc	r25, r1
     4e2:	b9 f1       	breq	.+110    	; 0x552 <OS_Abort+0x78>
     4e4:	40 f4       	brcc	.+16     	; 0x4f6 <OS_Abort+0x1c>
     4e6:	00 97       	sbiw	r24, 0x00	; 0
     4e8:	81 f0       	breq	.+32     	; 0x50a <OS_Abort+0x30>
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <OS_Abort+0x16>
     4ee:	98 c0       	rjmp	.+304    	; 0x620 <OS_Abort+0x146>
     4f0:	c7 e0       	ldi	r28, 0x07	; 7
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <OS_Abort+0x56>
     4f6:	83 30       	cpi	r24, 0x03	; 3
     4f8:	91 05       	cpc	r25, r1
     4fa:	09 f4       	brne	.+2      	; 0x4fe <OS_Abort+0x24>
     4fc:	47 c0       	rjmp	.+142    	; 0x58c <OS_Abort+0xb2>
     4fe:	04 97       	sbiw	r24, 0x04	; 4
     500:	09 f0       	breq	.+2      	; 0x504 <OS_Abort+0x2a>
     502:	8e c0       	rjmp	.+284    	; 0x620 <OS_Abort+0x146>
     504:	c6 e0       	ldi	r28, 0x06	; 6
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	6e c0       	rjmp	.+220    	; 0x5e6 <OS_Abort+0x10c>
     50a:	c6 e0       	ldi	r28, 0x06	; 6
     50c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		case PERIODIC_TASK_EXCEEDS_WCET:
			// blink 5 times really fast
			for (i = 0; i < 6; i++)
			{
				led_toggle(LED_ON_BOARD);
     50e:	87 e0       	ldi	r24, 0x07	; 7
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     516:	2f ef       	ldi	r18, 0xFF	; 255
     518:	80 e7       	ldi	r24, 0x70	; 112
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	21 50       	subi	r18, 0x01	; 1
     51e:	80 40       	sbci	r24, 0x00	; 0
     520:	90 40       	sbci	r25, 0x00	; 0
     522:	e1 f7       	brne	.-8      	; 0x51c <OS_Abort+0x42>
     524:	00 c0       	rjmp	.+0      	; 0x526 <OS_Abort+0x4c>
     526:	00 00       	nop
     528:	21 97       	sbiw	r28, 0x01	; 1
	int i = 0;
	switch (error)
	{
		case PERIODIC_TASK_EXCEEDS_WCET:
			// blink 5 times really fast
			for (i = 0; i < 6; i++)
     52a:	20 97       	sbiw	r28, 0x00	; 0
     52c:	81 f7       	brne	.-32     	; 0x50e <OS_Abort+0x34>
     52e:	78 c0       	rjmp	.+240    	; 0x620 <OS_Abort+0x146>
			break;
		case PERIODIC_TASK_TIMING_CONFLICT:
			// blink on and off 3 times with a period of 1 second
			for (i = 0; i <= 6; i++)
			{
				led_toggle(LED_ON_BOARD);
     530:	87 e0       	ldi	r24, 0x07	; 7
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     538:	2f ef       	ldi	r18, 0xFF	; 255
     53a:	83 ed       	ldi	r24, 0xD3	; 211
     53c:	90 e3       	ldi	r25, 0x30	; 48
     53e:	21 50       	subi	r18, 0x01	; 1
     540:	80 40       	sbci	r24, 0x00	; 0
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <OS_Abort+0x64>
     546:	00 c0       	rjmp	.+0      	; 0x548 <OS_Abort+0x6e>
     548:	00 00       	nop
     54a:	21 97       	sbiw	r28, 0x01	; 1
				_delay_ms(50);
			}
			break;
		case PERIODIC_TASK_TIMING_CONFLICT:
			// blink on and off 3 times with a period of 1 second
			for (i = 0; i <= 6; i++)
     54c:	20 97       	sbiw	r28, 0x00	; 0
     54e:	81 f7       	brne	.-32     	; 0x530 <OS_Abort+0x56>
     550:	67 c0       	rjmp	.+206    	; 0x620 <OS_Abort+0x146>
}

void OS_Abort(unsigned int error)
{
	int i = 0;
	switch (error)
     552:	c6 e0       	ldi	r28, 0x06	; 6
     554:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		case SENDER_CONFLICT:
			// blink 5 times with a period of ~500 ms
			for (i = 0; i < 6; i++)
			{
				led_toggle(LED_ON_BOARD);
     556:	87 e0       	ldi	r24, 0x07	; 7
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     55e:	8f e3       	ldi	r24, 0x3F	; 63
     560:	9c e9       	ldi	r25, 0x9C	; 156
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <OS_Abort+0x88>
     566:	00 c0       	rjmp	.+0      	; 0x568 <OS_Abort+0x8e>
     568:	00 00       	nop
				_delay_ms(10);
				led_toggle(LED_ON_BOARD);
     56a:	87 e0       	ldi	r24, 0x07	; 7
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     572:	9f ef       	ldi	r25, 0xFF	; 255
     574:	29 e6       	ldi	r18, 0x69	; 105
     576:	88 e1       	ldi	r24, 0x18	; 24
     578:	91 50       	subi	r25, 0x01	; 1
     57a:	20 40       	sbci	r18, 0x00	; 0
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <OS_Abort+0x9e>
     580:	00 c0       	rjmp	.+0      	; 0x582 <OS_Abort+0xa8>
     582:	00 00       	nop
     584:	21 97       	sbiw	r28, 0x01	; 1
				_delay_ms(1000);
			}
			break;
		case SENDER_CONFLICT:
			// blink 5 times with a period of ~500 ms
			for (i = 0; i < 6; i++)
     586:	20 97       	sbiw	r28, 0x00	; 0
     588:	31 f7       	brne	.-52     	; 0x556 <OS_Abort+0x7c>
     58a:	4a c0       	rjmp	.+148    	; 0x620 <OS_Abort+0x146>
}

void OS_Abort(unsigned int error)
{
	int i = 0;
	switch (error)
     58c:	c6 e0       	ldi	r28, 0x06	; 6
     58e:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		case MAX_THREADS_REACHED:
			// blink on->off->on in short bursts 5 times
			for (i = 0; i < 6; i++)
			{
				led_toggle(LED_ON_BOARD);
     590:	87 e0       	ldi	r24, 0x07	; 7
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     598:	9f ef       	ldi	r25, 0xFF	; 255
     59a:	20 e7       	ldi	r18, 0x70	; 112
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	91 50       	subi	r25, 0x01	; 1
     5a0:	20 40       	sbci	r18, 0x00	; 0
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	e1 f7       	brne	.-8      	; 0x59e <OS_Abort+0xc4>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <OS_Abort+0xce>
     5a8:	00 00       	nop
				_delay_ms(50);
				led_toggle(LED_ON_BOARD);
     5aa:	87 e0       	ldi	r24, 0x07	; 7
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     5b2:	9f ef       	ldi	r25, 0xFF	; 255
     5b4:	20 e7       	ldi	r18, 0x70	; 112
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	91 50       	subi	r25, 0x01	; 1
     5ba:	20 40       	sbci	r18, 0x00	; 0
     5bc:	80 40       	sbci	r24, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <OS_Abort+0xde>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <OS_Abort+0xe8>
     5c2:	00 00       	nop
				_delay_ms(50);
				led_toggle(LED_ON_BOARD);
     5c4:	87 e0       	ldi	r24, 0x07	; 7
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	23 ec       	ldi	r18, 0xC3	; 195
     5d0:	89 e0       	ldi	r24, 0x09	; 9
     5d2:	91 50       	subi	r25, 0x01	; 1
     5d4:	20 40       	sbci	r18, 0x00	; 0
     5d6:	80 40       	sbci	r24, 0x00	; 0
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <OS_Abort+0xf8>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <OS_Abort+0x102>
     5dc:	00 00       	nop
     5de:	21 97       	sbiw	r28, 0x01	; 1
				_delay_ms(500);
			}
			break;
		case MAX_THREADS_REACHED:
			// blink on->off->on in short bursts 5 times
			for (i = 0; i < 6; i++)
     5e0:	20 97       	sbiw	r28, 0x00	; 0
     5e2:	b1 f6       	brne	.-84     	; 0x590 <OS_Abort+0xb6>
     5e4:	1d c0       	rjmp	.+58     	; 0x620 <OS_Abort+0x146>
			break;
		case MAX_CHANNELS_CREATED:
			// blink on and off 5 times with a period of 1 second
			for (i = 0; i < 6; i++)
			{
				led_toggle(LED_ON_BOARD);
     5e6:	87 e0       	ldi	r24, 0x07	; 7
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	20 e7       	ldi	r18, 0x70	; 112
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	91 50       	subi	r25, 0x01	; 1
     5f6:	20 40       	sbci	r18, 0x00	; 0
     5f8:	80 40       	sbci	r24, 0x00	; 0
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <OS_Abort+0x11a>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <OS_Abort+0x124>
     5fe:	00 00       	nop
				_delay_ms(50);
				led_toggle(LED_ON_BOARD);
     600:	87 e0       	ldi	r24, 0x07	; 7
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     608:	9f ef       	ldi	r25, 0xFF	; 255
     60a:	23 ed       	ldi	r18, 0xD3	; 211
     60c:	80 e3       	ldi	r24, 0x30	; 48
     60e:	91 50       	subi	r25, 0x01	; 1
     610:	20 40       	sbci	r18, 0x00	; 0
     612:	80 40       	sbci	r24, 0x00	; 0
     614:	e1 f7       	brne	.-8      	; 0x60e <OS_Abort+0x134>
     616:	00 c0       	rjmp	.+0      	; 0x618 <OS_Abort+0x13e>
     618:	00 00       	nop
     61a:	21 97       	sbiw	r28, 0x01	; 1
				_delay_ms(200);
			}
			break;
		case MAX_CHANNELS_CREATED:
			// blink on and off 5 times with a period of 1 second
			for (i = 0; i < 6; i++)
     61c:	20 97       	sbiw	r28, 0x00	; 0
     61e:	19 f7       	brne	.-58     	; 0x5e6 <OS_Abort+0x10c>

			break;
		default:
			break;
	}
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <Kernel_Create_Task>:
  *  Create a new task
  */
static void Kernel_Create_Task()
{
	int x;
	if (Tasks == MAXTHREAD) 
     626:	80 91 d2 03 	lds	r24, 0x03D2
     62a:	90 91 d3 03 	lds	r25, 0x03D3
     62e:	40 97       	sbiw	r24, 0x10	; 16
     630:	21 f4       	brne	.+8      	; 0x63a <Kernel_Create_Task+0x14>
	{
		OS_Abort(MAX_THREADS_REACHED);
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0c 94 6d 02 	jmp	0x4da	; 0x4da <OS_Abort>
     63a:	eb ed       	ldi	r30, 0xDB	; 219
     63c:	f4 e0       	ldi	r31, 0x04	; 4
  *  Create a new task
  */
static void Kernel_Create_Task()
{
	int x;
	if (Tasks == MAXTHREAD) 
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
	}
	 /* find a DEAD PD that we can use  */

	for (x = 0; x < MAXTHREAD; x++) 
	{
		if (Process[x].state == DEAD) break;
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	89 2b       	or	r24, r25
     648:	39 f0       	breq	.+14     	; 0x658 <Kernel_Create_Task+0x32>
		OS_Abort(MAX_THREADS_REACHED);
		return;  /* Too many task! */
	}
	 /* find a DEAD PD that we can use  */

	for (x = 0; x < MAXTHREAD; x++) 
     64a:	2f 5f       	subi	r18, 0xFF	; 255
     64c:	3f 4f       	sbci	r19, 0xFF	; 255
     64e:	e8 5e       	subi	r30, 0xE8	; 232
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	20 31       	cpi	r18, 0x10	; 16
     654:	31 05       	cpc	r19, r1
     656:	a9 f7       	brne	.-22     	; 0x642 <Kernel_Create_Task+0x1c>
	{
		if (Process[x].state == DEAD) break;
	}

	++Tasks;
     658:	80 91 d2 03 	lds	r24, 0x03D2
     65c:	90 91 d3 03 	lds	r25, 0x03D3
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	90 93 d3 03 	sts	0x03D3, r25
     666:	80 93 d2 03 	sts	0x03D2, r24
	Kernel_Create_Task_At(&(Process[x]));
     66a:	48 e1       	ldi	r20, 0x18	; 24
     66c:	51 e0       	ldi	r21, 0x01	; 1
     66e:	24 9f       	mul	r18, r20
     670:	c0 01       	movw	r24, r0
     672:	25 9f       	mul	r18, r21
     674:	90 0d       	add	r25, r0
     676:	34 9f       	mul	r19, r20
     678:	90 0d       	add	r25, r0
     67a:	11 24       	eor	r1, r1
     67c:	88 52       	subi	r24, 0x28	; 40
     67e:	9c 4f       	sbci	r25, 0xFC	; 252
     680:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <Kernel_Create_Task_At>

00000684 <Kernel_Chan_Init>:
  */
static CHAN Kernel_Chan_Init()
{
	int x;
	// find empty channel
	for (x = 0; x < MAXCHAN; x++) 
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (Channels[x].id == 0)
     688:	4a e0       	ldi	r20, 0x0A	; 10
     68a:	48 9f       	mul	r20, r24
     68c:	f0 01       	movw	r30, r0
     68e:	49 9f       	mul	r20, r25
     690:	f0 0d       	add	r31, r0
     692:	11 24       	eor	r1, r1
     694:	ee 5c       	subi	r30, 0xCE	; 206
     696:	fc 4f       	sbci	r31, 0xFC	; 252
     698:	20 81       	ld	r18, Z
     69a:	31 81       	ldd	r19, Z+1	; 0x01
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	23 2b       	or	r18, r19
     6a0:	69 f4       	brne	.+26     	; 0x6bc <Kernel_Chan_Init+0x38>
		{
			// initialize channel
			Channels[x].id = x + 1;
     6a2:	91 83       	std	Z+1, r25	; 0x01
     6a4:	80 83       	st	Z, r24
			Channels[x].sender = NULL;
     6a6:	13 82       	std	Z+3, r1	; 0x03
     6a8:	12 82       	std	Z+2, r1	; 0x02
			Channels[x].receivers.head = NULL;
     6aa:	15 82       	std	Z+5, r1	; 0x05
     6ac:	14 82       	std	Z+4, r1	; 0x04
			Channels[x].receivers.tail = NULL;
     6ae:	17 82       	std	Z+7, r1	; 0x07
     6b0:	16 82       	std	Z+6, r1	; 0x06
			Channels[x].val = 0;
     6b2:	11 86       	std	Z+9, r1	; 0x09
     6b4:	10 86       	std	Z+8, r1	; 0x08
	if (x == MAXCHAN) 
	{
		OS_Abort(MAX_CHANNELS_CREATED);	
		return NULL;
	}
	return Channels[x].id;
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	08 95       	ret
  */
static CHAN Kernel_Chan_Init()
{
	int x;
	// find empty channel
	for (x = 0; x < MAXCHAN; x++) 
     6bc:	80 31       	cpi	r24, 0x10	; 16
     6be:	91 05       	cpc	r25, r1
     6c0:	21 f7       	brne	.-56     	; 0x68a <Kernel_Chan_Init+0x6>
	}

	// No empty channels..
	if (x == MAXCHAN) 
	{
		OS_Abort(MAX_CHANNELS_CREATED);	
     6c2:	84 e0       	ldi	r24, 0x04	; 4
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 6d 02 	call	0x4da	; 0x4da <OS_Abort>
		return NULL;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
	}
	return Channels[x].id;
}
     6ce:	08 95       	ret

000006d0 <OS_Start>:

/**
  * This function starts the RTOS after creating a few tasks.
  */
void OS_Start()
{
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	9f 92       	push	r9
     6d6:	af 92       	push	r10
     6d8:	bf 92       	push	r11
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	1f 92       	push	r1
     6ec:	1f 92       	push	r1
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
	if ((!KernelActive) && (Tasks > 0)) {
     6f2:	80 91 d4 03 	lds	r24, 0x03D4
     6f6:	90 91 d5 03 	lds	r25, 0x03D5
     6fa:	89 2b       	or	r24, r25
     6fc:	09 f0       	breq	.+2      	; 0x700 <OS_Start+0x30>
     6fe:	99 c1       	rjmp	.+818    	; 0xa32 <OS_Start+0x362>
     700:	80 91 d2 03 	lds	r24, 0x03D2
     704:	90 91 d3 03 	lds	r25, 0x03D3
     708:	89 2b       	or	r24, r25
     70a:	09 f4       	brne	.+2      	; 0x70e <OS_Start+0x3e>
     70c:	92 c1       	rjmp	.+804    	; 0xa32 <OS_Start+0x362>
		Disable_Interrupt();
     70e:	f8 94       	cli
		/* we may have to initialize the interrupt vector for Enter_Kernel() here. */
		/* here we go...  */
		KernelActive = 1;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 d5 03 	sts	0x03D5, r25
     718:	80 93 d4 03 	sts	0x03D4, r24
	}
}

void init_tick_timer() {
  //Clear timer config.
  TCCR3A = 0;      // Timer 3 A
     71c:	10 92 90 00 	sts	0x0090, r1
  TCCR3B = 0;      // Timer 3 B
     720:	10 92 91 00 	sts	0x0091, r1
  //Set to CTC (mode 4)
  TCCR3B |= (1<<WGM32);
     724:	80 91 91 00 	lds	r24, 0x0091
     728:	88 60       	ori	r24, 0x08	; 8
     72a:	80 93 91 00 	sts	0x0091, r24
  //Set prescaller to 256
  TCCR3B |= (1<<CS32);
     72e:	80 91 91 00 	lds	r24, 0x0091
     732:	84 60       	ori	r24, 0x04	; 4
     734:	80 93 91 00 	sts	0x0091, r24
  //Set TOP value (1 milisecond)
  OCR3A = OCR_MAX_VAL; // or (TICK * (F_CPU / 1024 ) / 1000)
     738:	81 e7       	ldi	r24, 0x71	; 113
     73a:	92 e0       	ldi	r25, 0x02	; 2
     73c:	90 93 99 00 	sts	0x0099, r25
     740:	80 93 98 00 	sts	0x0098, r24
  //Enable interupt A for timer 3.
  TIMSK3 |= (1<<OCIE3A);
     744:	80 91 71 00 	lds	r24, 0x0071
     748:	82 60       	ori	r24, 0x02	; 2
     74a:	80 93 71 00 	sts	0x0071, r24
  //Set timer to 0 (optional here).
  TCNT3 = 0;
     74e:	10 92 95 00 	sts	0x0095, r1
     752:	10 92 94 00 	sts	0x0094, r1
  *
  * This is the main loop of our Kernel, called by OS_Start().
  */
static void Kernel_Main_Loop()
{
	Kernel_Dispatch();  /* select a new task to run */
     756:	0e 94 80 07 	call	0xf00	; 0xf00 <Kernel_Dispatch>
	return Cp->retval;
}

static void Kernel_Write()
{
	CH* channel_ptr = &(Channels[channel_buffer.id]);
     75a:	8a e0       	ldi	r24, 0x0A	; 10
     75c:	98 2e       	mov	r9, r24
	if (channel_ptr->receivers.head != NULL)
	{
		PD* recv_process = Dequeue(&(channel_ptr->receivers));
		while (recv_process != NULL)
		{
			recv_process->state = READY;
     75e:	02 e0       	ldi	r16, 0x02	; 2
     760:	10 e0       	ldi	r17, 0x00	; 0
{
	CH* channel_ptr = &(Channels[channel_buffer.id]);
	// if there is no sender then add to wait queue and block
	if (channel_ptr->sender == NULL)
	{
		Cp->state = WAITING;
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	e9 2e       	mov	r14, r25
     766:	f1 2c       	mov	r15, r1
		Kernel_Create_Task();
		break;
	case TIMER_TICK:
		switch (Cp->level) {
			case SYSTEM: // drop down
				Cp->state = RUNNING;
     768:	cc 24       	eor	r12, r12
     76a:	c3 94       	inc	r12
     76c:	d1 2c       	mov	r13, r1
{
	Kernel_Dispatch();  /* select a new task to run */

	while (1) 
	{
		Cp->request = NONE; /* clear its request */
     76e:	80 91 d6 03 	lds	r24, 0x03D6
     772:	90 91 d7 03 	lds	r25, 0x03D7
     776:	fc 01       	movw	r30, r24
     778:	ee 5e       	subi	r30, 0xEE	; 238
     77a:	fe 4f       	sbci	r31, 0xFE	; 254
     77c:	11 82       	std	Z+1, r1	; 0x01
     77e:	10 82       	st	Z, r1

		 /* activate this newly selected task */
		CurrentSp = Cp->sp;
     780:	fc 01       	movw	r30, r24
     782:	f3 95       	inc	r31
     784:	80 81       	ld	r24, Z
     786:	91 81       	ldd	r25, Z+1	; 0x01
     788:	90 93 61 15 	sts	0x1561, r25
     78c:	80 93 60 15 	sts	0x1560, r24

		Exit_Kernel();    /* or CSwitch() */
     790:	0e 94 ac 00 	call	0x158	; 0x158 <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
     794:	60 91 d6 03 	lds	r22, 0x03D6
     798:	70 91 d7 03 	lds	r23, 0x03D7
     79c:	80 91 60 15 	lds	r24, 0x1560
     7a0:	90 91 61 15 	lds	r25, 0x1561
     7a4:	fb 01       	movw	r30, r22
     7a6:	f3 95       	inc	r31
     7a8:	91 83       	std	Z+1, r25	; 0x01
     7aa:	80 83       	st	Z, r24
 * Determines whether current process should be
 * in the ready or waiting queue
 */
static void Kernel_Handle_Request(void)
{
	switch (Cp->request) 
     7ac:	fb 01       	movw	r30, r22
     7ae:	ee 5e       	subi	r30, 0xEE	; 238
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	01 90       	ld	r0, Z+
     7b4:	f0 81       	ld	r31, Z
     7b6:	e0 2d       	mov	r30, r0
     7b8:	ea 30       	cpi	r30, 0x0A	; 10
     7ba:	f1 05       	cpc	r31, r1
     7bc:	c0 f6       	brcc	.-80     	; 0x76e <OS_Start+0x9e>
     7be:	ee 58       	subi	r30, 0x8E	; 142
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__tablejump2__>
	{
	case CREATE:
		Kernel_Create_Task();
     7c6:	0e 94 13 03 	call	0x626	; 0x626 <Kernel_Create_Task>
     7ca:	d1 cf       	rjmp	.-94     	; 0x76e <OS_Start+0x9e>
		break;
	case TIMER_TICK:
		switch (Cp->level) {
     7cc:	fb 01       	movw	r30, r22
     7ce:	e9 5f       	subi	r30, 0xF9	; 249
     7d0:	fe 4f       	sbci	r31, 0xFE	; 254
     7d2:	80 81       	ld	r24, Z
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	49 f0       	breq	.+18     	; 0x7ea <OS_Start+0x11a>
     7d8:	83 30       	cpi	r24, 0x03	; 3
     7da:	09 f0       	breq	.+2      	; 0x7de <OS_Start+0x10e>
     7dc:	58 c0       	rjmp	.+176    	; 0x88e <OS_Start+0x1be>
			case SYSTEM: // drop down
				Cp->state = RUNNING;
     7de:	fb 01       	movw	r30, r22
     7e0:	ed 5f       	subi	r30, 0xFD	; 253
     7e2:	fe 4f       	sbci	r31, 0xFE	; 254
     7e4:	d1 82       	std	Z+1, r13	; 0x01
     7e6:	c0 82       	st	Z, r12
     7e8:	9f c0       	rjmp	.+318    	; 0x928 <OS_Start+0x258>
				break;
			case IDLE:
				break;
			case PERIODIC: // drop down
				Cp->state = READY;
     7ea:	fb 01       	movw	r30, r22
     7ec:	ed 5f       	subi	r30, 0xFD	; 253
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	11 83       	std	Z+1, r17	; 0x01
     7f2:	00 83       	st	Z, r16
				Cp->ticks_remaining--;
     7f4:	fb 01       	movw	r30, r22
     7f6:	e2 5f       	subi	r30, 0xF2	; 242
     7f8:	fe 4f       	sbci	r31, 0xFE	; 254
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	91 83       	std	Z+1, r25	; 0x01
     802:	80 83       	st	Z, r24
				if (Cp->ticks_remaining <= 0) {
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	89 2b       	or	r24, r25
     80a:	09 f0       	breq	.+2      	; 0x80e <OS_Start+0x13e>
     80c:	8d c0       	rjmp	.+282    	; 0x928 <OS_Start+0x258>
					//errno = ERRNO_PERIODIC_TASK_EXCEEDS_WCET;
					OS_Abort(PERIODIC_TASK_EXCEEDS_WCET);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 6d 02 	call	0x4da	; 0x4da <OS_Abort>
     816:	88 c0       	rjmp	.+272    	; 0x928 <OS_Start+0x258>
		break;
	case NEXT:
	case NONE:
		/* NONE could be caused by a timer interrupt */
		// if the current process was a system level task, then set state back to ready and put task back into system queue
		if (Cp->level == SYSTEM)
     818:	fb 01       	movw	r30, r22
     81a:	e9 5f       	subi	r30, 0xF9	; 249
     81c:	fe 4f       	sbci	r31, 0xFE	; 254
     81e:	80 81       	ld	r24, Z
     820:	83 30       	cpi	r24, 0x03	; 3
     822:	41 f4       	brne	.+16     	; 0x834 <OS_Start+0x164>
		{
			Cp->state = READY;
     824:	fb 01       	movw	r30, r22
     826:	ed 5f       	subi	r30, 0xFD	; 253
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	11 83       	std	Z+1, r17	; 0x01
     82c:	00 83       	st	Z, r16
			Enqueue(&system_queue, Cp);
     82e:	8c e0       	ldi	r24, 0x0C	; 12
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	37 c0       	rjmp	.+110    	; 0x8a2 <OS_Start+0x1d2>
		}else if(Cp->level == PERIODIC)
     834:	80 81       	ld	r24, Z
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	49 f5       	brne	.+82     	; 0x88c <OS_Start+0x1bc>
		{

			Dequeue(&periodic_queue);
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	69 83       	std	Y+1, r22	; 0x01
     840:	7a 83       	std	Y+2, r23	; 0x02
     842:	0e 94 51 07 	call	0xea2	; 0xea2 <Dequeue.isra.0>
			Cp->state = READY;
     846:	69 81       	ldd	r22, Y+1	; 0x01
     848:	7a 81       	ldd	r23, Y+2	; 0x02
     84a:	fb 01       	movw	r30, r22
     84c:	ed 5f       	subi	r30, 0xFD	; 253
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	11 83       	std	Z+1, r17	; 0x01
     852:	00 83       	st	Z, r16
			Cp->next_start = Cp->next_start + Cp->period;
     854:	fb 01       	movw	r30, r22
     856:	e6 5f       	subi	r30, 0xF6	; 246
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	20 81       	ld	r18, Z
     85c:	31 81       	ldd	r19, Z+1	; 0x01
     85e:	db 01       	movw	r26, r22
     860:	a0 5f       	subi	r26, 0xF0	; 240
     862:	be 4f       	sbci	r27, 0xFE	; 254
     864:	8d 91       	ld	r24, X+
     866:	9c 91       	ld	r25, X
     868:	82 0f       	add	r24, r18
     86a:	93 1f       	adc	r25, r19
     86c:	91 83       	std	Z+1, r25	; 0x01
     86e:	80 83       	st	Z, r24

			Cp->ticks_remaining  = Cp->wcet ;
     870:	fb 01       	movw	r30, r22
     872:	e4 5f       	subi	r30, 0xF4	; 244
     874:	fe 4f       	sbci	r31, 0xFE	; 254
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	fb 01       	movw	r30, r22
     87c:	e2 5f       	subi	r30, 0xF2	; 242
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	91 83       	std	Z+1, r25	; 0x01
     882:	80 83       	st	Z, r24
			EnqueuePeriodic(&periodic_queue, Cp);
     884:	cb 01       	movw	r24, r22
     886:	0e 94 8b 01 	call	0x316	; 0x316 <EnqueuePeriodic.constprop.5>
     88a:	4e c0       	rjmp	.+156    	; 0x928 <OS_Start+0x258>
			// Enqueue(&periodic_queue, Cp);
		}
		else if (Cp->level == RR)
     88c:	80 81       	ld	r24, Z
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	09 f0       	breq	.+2      	; 0x894 <OS_Start+0x1c4>
     892:	4a c0       	rjmp	.+148    	; 0x928 <OS_Start+0x258>
		{
			Cp->state = READY;
     894:	fb 01       	movw	r30, r22
     896:	ed 5f       	subi	r30, 0xFD	; 253
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	11 83       	std	Z+1, r17	; 0x01
     89c:	00 83       	st	Z, r16
			Enqueue(&rr_queue, Cp);
     89e:	88 e0       	ldi	r24, 0x08	; 8
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	0e 94 57 01 	call	0x2ae	; 0x2ae <Enqueue>
     8a6:	40 c0       	rjmp	.+128    	; 0x928 <OS_Start+0x258>
		}
		Kernel_Dispatch();
		break;
	case TERMINATE:
		/* deallocate all resources used by this task */
		Cp->state = DEAD;
     8a8:	fb 01       	movw	r30, r22
     8aa:	ed 5f       	subi	r30, 0xFD	; 253
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	11 82       	std	Z+1, r1	; 0x01
     8b0:	10 82       	st	Z, r1
     8b2:	3a c0       	rjmp	.+116    	; 0x928 <OS_Start+0x258>
		// Cp = Dequeue(&system_queue);
		Kernel_Dispatch();
		break;
	case CREATE_CHANNEL:
		kernel_channel_retval = Kernel_Chan_Init();
     8b4:	0e 94 42 03 	call	0x684	; 0x684 <Kernel_Chan_Init>
     8b8:	90 93 03 02 	sts	0x0203, r25
     8bc:	80 93 02 02 	sts	0x0202, r24
     8c0:	56 cf       	rjmp	.-340    	; 0x76e <OS_Start+0x9e>
	return kernel_channel_retval;
}

static void Kernel_Send()
{
	CH* channel_ptr = &(Channels[channel_buffer.id]);
     8c2:	80 91 10 02 	lds	r24, 0x0210
     8c6:	90 91 11 02 	lds	r25, 0x0211
     8ca:	98 9e       	mul	r9, r24
     8cc:	30 01       	movw	r6, r0
     8ce:	99 9e       	mul	r9, r25
     8d0:	70 0c       	add	r7, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	c3 01       	movw	r24, r6
     8d6:	8e 5c       	subi	r24, 0xCE	; 206
     8d8:	9c 4f       	sbci	r25, 0xFC	; 252
     8da:	3c 01       	movw	r6, r24
	// if no receivers waiting then add Cp as sender and block
	if (channel_ptr->receivers.head == NULL)
     8dc:	dc 01       	movw	r26, r24
     8de:	14 96       	adiw	r26, 0x04	; 4
     8e0:	8d 91       	ld	r24, X+
     8e2:	9c 91       	ld	r25, X
     8e4:	15 97       	sbiw	r26, 0x05	; 5
     8e6:	89 2b       	or	r24, r25
     8e8:	11 f5       	brne	.+68     	; 0x92e <OS_Start+0x25e>
	{
		// if sender already exists.. then error
		if (channel_ptr->sender != NULL)
     8ea:	12 96       	adiw	r26, 0x02	; 2
     8ec:	8d 91       	ld	r24, X+
     8ee:	9c 91       	ld	r25, X
     8f0:	13 97       	sbiw	r26, 0x03	; 3
     8f2:	89 2b       	or	r24, r25
     8f4:	21 f0       	breq	.+8      	; 0x8fe <OS_Start+0x22e>
		{
			// ABORT!!
			OS_Abort(SENDER_CONFLICT);
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 6d 02 	call	0x4da	; 0x4da <OS_Abort>
		}
		channel_ptr->sender = Cp;
     8fe:	80 91 d6 03 	lds	r24, 0x03D6
     902:	90 91 d7 03 	lds	r25, 0x03D7
     906:	f3 01       	movw	r30, r6
     908:	93 83       	std	Z+3, r25	; 0x03
     90a:	82 83       	std	Z+2, r24	; 0x02
		Cp->state = WAITING;
     90c:	fc 01       	movw	r30, r24
     90e:	ed 5f       	subi	r30, 0xFD	; 253
     910:	fe 4f       	sbci	r31, 0xFE	; 254
     912:	f1 82       	std	Z+1, r15	; 0x01
     914:	e0 82       	st	Z, r14
		channel_ptr->val = channel_buffer.val;
     916:	80 91 18 02 	lds	r24, 0x0218
     91a:	90 91 19 02 	lds	r25, 0x0219
     91e:	d3 01       	movw	r26, r6
     920:	19 96       	adiw	r26, 0x09	; 9
     922:	9c 93       	st	X, r25
     924:	8e 93       	st	-X, r24
     926:	18 97       	sbiw	r26, 0x08	; 8
		Kernel_Dispatch();
     928:	0e 94 80 07 	call	0xf00	; 0xf00 <Kernel_Dispatch>
     92c:	20 cf       	rjmp	.-448    	; 0x76e <OS_Start+0x9e>
	}
	else 
	{
		// if there are receivers then give all the receivers their value
		PD* recv_process = Dequeue(&(channel_ptr->receivers));
     92e:	53 01       	movw	r10, r6
     930:	b4 e0       	ldi	r27, 0x04	; 4
     932:	ab 0e       	add	r10, r27
     934:	b1 1c       	adc	r11, r1
			recv_process->retval = channel_buffer.val;

			// enqueue revc process back into its respective queue
			EnqueueTaskToStateQueue(recv_process);

			recv_process = Dequeue(&(channel_ptr->receivers));
     936:	c5 01       	movw	r24, r10
     938:	0e 94 51 07 	call	0xea2	; 0xea2 <Dequeue.isra.0>
	}
	else 
	{
		// if there are receivers then give all the receivers their value
		PD* recv_process = Dequeue(&(channel_ptr->receivers));
		while (recv_process != NULL)
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	09 f4       	brne	.+2      	; 0x942 <OS_Start+0x272>
     940:	72 c0       	rjmp	.+228    	; 0xa26 <OS_Start+0x356>
		{
			recv_process->state = READY;
     942:	fc 01       	movw	r30, r24
     944:	ed 5f       	subi	r30, 0xFD	; 253
     946:	fe 4f       	sbci	r31, 0xFE	; 254
     948:	11 83       	std	Z+1, r17	; 0x01
     94a:	00 83       	st	Z, r16
			recv_process->retval = channel_buffer.val;
     94c:	20 91 18 02 	lds	r18, 0x0218
     950:	30 91 19 02 	lds	r19, 0x0219
     954:	fc 01       	movw	r30, r24
     956:	ec 5e       	subi	r30, 0xEC	; 236
     958:	fe 4f       	sbci	r31, 0xFE	; 254
     95a:	31 83       	std	Z+1, r19	; 0x01
     95c:	20 83       	st	Z, r18

			// enqueue revc process back into its respective queue
			EnqueueTaskToStateQueue(recv_process);
     95e:	0e 94 61 07 	call	0xec2	; 0xec2 <EnqueueTaskToStateQueue.constprop.4>
     962:	e9 cf       	rjmp	.-46     	; 0x936 <OS_Start+0x266>
	}
}

static void Kernel_Recv()
{
	CH* channel_ptr = &(Channels[channel_buffer.id]);
     964:	80 91 10 02 	lds	r24, 0x0210
     968:	90 91 11 02 	lds	r25, 0x0211
     96c:	98 9e       	mul	r9, r24
     96e:	50 01       	movw	r10, r0
     970:	99 9e       	mul	r9, r25
     972:	b0 0c       	add	r11, r0
     974:	11 24       	eor	r1, r1
     976:	c5 01       	movw	r24, r10
     978:	8e 5c       	subi	r24, 0xCE	; 206
     97a:	9c 4f       	sbci	r25, 0xFC	; 252
     97c:	5c 01       	movw	r10, r24
	// if there is no sender then add to wait queue and block
	if (channel_ptr->sender == NULL)
     97e:	dc 01       	movw	r26, r24
     980:	12 96       	adiw	r26, 0x02	; 2
     982:	8d 91       	ld	r24, X+
     984:	9c 91       	ld	r25, X
     986:	13 97       	sbiw	r26, 0x03	; 3
     988:	fb 01       	movw	r30, r22
     98a:	ec 5e       	subi	r30, 0xEC	; 236
     98c:	fe 4f       	sbci	r31, 0xFE	; 254
     98e:	00 97       	sbiw	r24, 0x00	; 0
     990:	59 f4       	brne	.+22     	; 0x9a8 <OS_Start+0x2d8>
	{
		Cp->state = WAITING;
     992:	db 01       	movw	r26, r22
     994:	ad 5f       	subi	r26, 0xFD	; 253
     996:	be 4f       	sbci	r27, 0xFE	; 254
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	fc 92       	st	X, r15
     99c:	ee 92       	st	-X, r14
		Cp->retval = NULL;
     99e:	11 82       	std	Z+1, r1	; 0x01
     9a0:	10 82       	st	Z, r1
		Enqueue(&(channel_ptr->receivers), Cp);
     9a2:	c5 01       	movw	r24, r10
     9a4:	04 96       	adiw	r24, 0x04	; 4
     9a6:	7d cf       	rjmp	.-262    	; 0x8a2 <OS_Start+0x1d2>
		Kernel_Dispatch();
	}
	else 
	{
		// there is a sender then grab the value and set sender state back to ready
		Cp->retval = channel_ptr->val;
     9a8:	d5 01       	movw	r26, r10
     9aa:	18 96       	adiw	r26, 0x08	; 8
     9ac:	2d 91       	ld	r18, X+
     9ae:	3c 91       	ld	r19, X
     9b0:	19 97       	sbiw	r26, 0x09	; 9
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	20 83       	st	Z, r18
		channel_ptr->sender->state = READY;
     9b6:	fc 01       	movw	r30, r24
     9b8:	ed 5f       	subi	r30, 0xFD	; 253
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	11 83       	std	Z+1, r17	; 0x01
     9be:	00 83       	st	Z, r16
	
		// enqueue sender back into its task queue
		EnqueueTaskToStateQueue(channel_ptr->sender);
     9c0:	0e 94 61 07 	call	0xec2	; 0xec2 <EnqueueTaskToStateQueue.constprop.4>

		channel_ptr->receivers.head = NULL;
     9c4:	f5 01       	movw	r30, r10
     9c6:	30 c0       	rjmp	.+96     	; 0xa28 <OS_Start+0x358>
	return Cp->retval;
}

static void Kernel_Write()
{
	CH* channel_ptr = &(Channels[channel_buffer.id]);
     9c8:	80 91 10 02 	lds	r24, 0x0210
     9cc:	90 91 11 02 	lds	r25, 0x0211
     9d0:	98 9e       	mul	r9, r24
     9d2:	30 01       	movw	r6, r0
     9d4:	99 9e       	mul	r9, r25
     9d6:	70 0c       	add	r7, r0
     9d8:	11 24       	eor	r1, r1
     9da:	c3 01       	movw	r24, r6
     9dc:	8e 5c       	subi	r24, 0xCE	; 206
     9de:	9c 4f       	sbci	r25, 0xFC	; 252
     9e0:	3c 01       	movw	r6, r24
	// if there are receivers then give all the receivers their value
	if (channel_ptr->receivers.head != NULL)
     9e2:	dc 01       	movw	r26, r24
     9e4:	14 96       	adiw	r26, 0x04	; 4
     9e6:	8d 91       	ld	r24, X+
     9e8:	9c 91       	ld	r25, X
     9ea:	15 97       	sbiw	r26, 0x05	; 5
     9ec:	89 2b       	or	r24, r25
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <OS_Start+0x322>
     9f0:	be ce       	rjmp	.-644    	; 0x76e <OS_Start+0x9e>
	{
		PD* recv_process = Dequeue(&(channel_ptr->receivers));
     9f2:	53 01       	movw	r10, r6
     9f4:	b4 e0       	ldi	r27, 0x04	; 4
     9f6:	ab 0e       	add	r10, r27
     9f8:	b1 1c       	adc	r11, r1
			recv_process->retval = channel_buffer.val;

			// enqueue revc process back into its respective queue
			EnqueueTaskToStateQueue(recv_process);

			recv_process = Dequeue(&(channel_ptr->receivers));
     9fa:	c5 01       	movw	r24, r10
     9fc:	0e 94 51 07 	call	0xea2	; 0xea2 <Dequeue.isra.0>
	CH* channel_ptr = &(Channels[channel_buffer.id]);
	// if there are receivers then give all the receivers their value
	if (channel_ptr->receivers.head != NULL)
	{
		PD* recv_process = Dequeue(&(channel_ptr->receivers));
		while (recv_process != NULL)
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	89 f0       	breq	.+34     	; 0xa26 <OS_Start+0x356>
		{
			recv_process->state = READY;
     a04:	fc 01       	movw	r30, r24
     a06:	ed 5f       	subi	r30, 0xFD	; 253
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	11 83       	std	Z+1, r17	; 0x01
     a0c:	00 83       	st	Z, r16
			recv_process->retval = channel_buffer.val;
     a0e:	20 91 18 02 	lds	r18, 0x0218
     a12:	30 91 19 02 	lds	r19, 0x0219
     a16:	fc 01       	movw	r30, r24
     a18:	ec 5e       	subi	r30, 0xEC	; 236
     a1a:	fe 4f       	sbci	r31, 0xFE	; 254
     a1c:	31 83       	std	Z+1, r19	; 0x01
     a1e:	20 83       	st	Z, r18

			// enqueue revc process back into its respective queue
			EnqueueTaskToStateQueue(recv_process);
     a20:	0e 94 61 07 	call	0xec2	; 0xec2 <EnqueueTaskToStateQueue.constprop.4>
     a24:	ea cf       	rjmp	.-44     	; 0x9fa <OS_Start+0x32a>

			recv_process = Dequeue(&(channel_ptr->receivers));
		}
		channel_ptr->receivers.head = NULL;
     a26:	f3 01       	movw	r30, r6
     a28:	15 82       	std	Z+5, r1	; 0x05
     a2a:	14 82       	std	Z+4, r1	; 0x04
		channel_ptr->sender = NULL;
     a2c:	13 82       	std	Z+3, r1	; 0x03
     a2e:	12 82       	std	Z+2, r1	; 0x02
     a30:	9e ce       	rjmp	.-708    	; 0x76e <OS_Start+0x9e>
		KernelActive = 1;
		init_tick_timer();

		Kernel_Main_Loop();   /* main loop of the Kernel*/
	}
}
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	bf 90       	pop	r11
     a48:	af 90       	pop	r10
     a4a:	9f 90       	pop	r9
     a4c:	7f 90       	pop	r7
     a4e:	6f 90       	pop	r6
     a50:	08 95       	ret

00000a52 <Task_Create_Period>:

PID Task_Create_RR(void(*f)(void), int arg) {
	Task_Create(f, arg, RR);
};

PID Task_Create_Period(void(*f)(void), int arg, TICK period, TICK wcet, TICK offset) {
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
	new_task_args.code = f;
     a56:	90 93 23 03 	sts	0x0323, r25
     a5a:	80 93 22 03 	sts	0x0322, r24
	new_task_args.arg = arg;
     a5e:	70 93 20 03 	sts	0x0320, r23
     a62:	60 93 1f 03 	sts	0x031F, r22
	new_task_args.level = PERIODIC;
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	80 93 21 03 	sts	0x0321, r24
	new_task_args.period = period;
     a6c:	50 93 2b 03 	sts	0x032B, r21
     a70:	40 93 2a 03 	sts	0x032A, r20
	new_task_args.wcet = wcet;
     a74:	30 93 27 03 	sts	0x0327, r19
     a78:	20 93 26 03 	sts	0x0326, r18
	new_task_args.ticks_remaining = wcet;
     a7c:	30 93 29 03 	sts	0x0329, r19
     a80:	20 93 28 03 	sts	0x0328, r18
	new_task_args.next_start = offset;
     a84:	10 93 25 03 	sts	0x0325, r17
     a88:	00 93 24 03 	sts	0x0324, r16

	if (KernelActive) 
     a8c:	20 91 d4 03 	lds	r18, 0x03D4
     a90:	30 91 d5 03 	lds	r19, 0x03D5
     a94:	80 91 d6 03 	lds	r24, 0x03D6
     a98:	90 91 d7 03 	lds	r25, 0x03D7
     a9c:	23 2b       	or	r18, r19
     a9e:	59 f0       	breq	.+22     	; 0xab6 <Task_Create_Period+0x64>
	{
		Disable_Interrupt();
     aa0:	f8 94       	cli
		Cp->request = CREATE;
     aa2:	fc 01       	movw	r30, r24
     aa4:	ee 5e       	subi	r30, 0xEE	; 238
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
     aa8:	22 e0       	ldi	r18, 0x02	; 2
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	31 83       	std	Z+1, r19	; 0x01
     aae:	20 83       	st	Z, r18
		Enter_Kernel();
     ab0:	0e 94 01 01 	call	0x202	; 0x202 <Enter_Kernel>
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <Task_Create_Period+0x72>
	}
	else 
	{
		Cp->request = NONE;
     ab6:	fc 01       	movw	r30, r24
     ab8:	ee 5e       	subi	r30, 0xEE	; 238
     aba:	fe 4f       	sbci	r31, 0xFE	; 254
     abc:	11 82       	std	Z+1, r1	; 0x01
     abe:	10 82       	st	Z, r1
		Kernel_Create_Task();
     ac0:	0e 94 13 03 	call	0x626	; 0x626 <Kernel_Create_Task>
	}
};
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	08 95       	ret

00000aca <Task_GetArg>:

int Task_GetArg(void)
{
	return Cp->arg;
     aca:	e0 91 d6 03 	lds	r30, 0x03D6
     ace:	f0 91 d7 03 	lds	r31, 0x03D7
     ad2:	eb 5f       	subi	r30, 0xFB	; 251
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	80 81       	ld	r24, Z
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
}
     ada:	08 95       	ret

00000adc <Task_Create>:
  * each task gives up its share of the processor voluntarily by calling
  * Task_Next().
  */
void Task_Create(voidfuncptr f, int arg, uint8_t level)
{
	if (KernelActive) 
     adc:	e0 91 d4 03 	lds	r30, 0x03D4
     ae0:	f0 91 d5 03 	lds	r31, 0x03D5
     ae4:	20 91 d6 03 	lds	r18, 0x03D6
     ae8:	30 91 d7 03 	lds	r19, 0x03D7
     aec:	ef 2b       	or	r30, r31
     aee:	a1 f0       	breq	.+40     	; 0xb18 <Task_Create+0x3c>
	{
		Disable_Interrupt();
     af0:	f8 94       	cli
		new_task_args.code = f;
     af2:	90 93 23 03 	sts	0x0323, r25
     af6:	80 93 22 03 	sts	0x0322, r24
		new_task_args.arg = arg;
     afa:	70 93 20 03 	sts	0x0320, r23
     afe:	60 93 1f 03 	sts	0x031F, r22
		new_task_args.level = (uint8_t)level;
     b02:	40 93 21 03 	sts	0x0321, r20

		Cp->request = CREATE;
     b06:	f9 01       	movw	r30, r18
     b08:	ee 5e       	subi	r30, 0xEE	; 238
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	91 83       	std	Z+1, r25	; 0x01
     b12:	80 83       	st	Z, r24
		Enter_Kernel();
     b14:	0c 94 01 01 	jmp	0x202	; 0x202 <Enter_Kernel>
	}
	else 
	{
		new_task_args.code = f;
     b18:	90 93 23 03 	sts	0x0323, r25
     b1c:	80 93 22 03 	sts	0x0322, r24
		new_task_args.arg = arg;
     b20:	70 93 20 03 	sts	0x0320, r23
     b24:	60 93 1f 03 	sts	0x031F, r22
		new_task_args.level = (uint8_t)level;
     b28:	40 93 21 03 	sts	0x0321, r20
		Cp->request = NONE;
     b2c:	f9 01       	movw	r30, r18
     b2e:	ee 5e       	subi	r30, 0xEE	; 238
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	11 82       	std	Z+1, r1	; 0x01
     b34:	10 82       	st	Z, r1

		Kernel_Create_Task();
     b36:	0c 94 13 03 	jmp	0x626	; 0x626 <Kernel_Create_Task>

00000b3a <Task_Create_Idle>:

/*
 * Task management.
 */
PID Task_Create_Idle(void(*f)(void), int arg) {
	Task_Create(f, arg, IDLE);
     b3a:	44 e0       	ldi	r20, 0x04	; 4
     b3c:	0e 94 6e 05 	call	0xadc	; 0xadc <Task_Create>
};
     b40:	08 95       	ret

00000b42 <Task_Create_System>:

PID Task_Create_System(void(*f)(void), int arg) {
	Task_Create(f, arg, SYSTEM);
     b42:	43 e0       	ldi	r20, 0x03	; 3
     b44:	0e 94 6e 05 	call	0xadc	; 0xadc <Task_Create>
};
     b48:	08 95       	ret

00000b4a <OS_Init>:
	* system calls.
	*/
void OS_Init()
{
	int x;
	Tasks = 0;
     b4a:	10 92 d3 03 	sts	0x03D3, r1
     b4e:	10 92 d2 03 	sts	0x03D2, r1
	KernelActive = 0;
     b52:	10 92 d5 03 	sts	0x03D5, r1
     b56:	10 92 d4 03 	sts	0x03D4, r1
     b5a:	e8 ed       	ldi	r30, 0xD8	; 216
     b5c:	f3 e0       	ldi	r31, 0x03	; 3
	//Reminder: Clear the memory for the task on creation.
	//Init Kernel data structures
	for (x = 0; x < MAXTHREAD; x++) 
	{
		memset(&(Process[x]), 0, sizeof(PD));
     b5e:	88 e1       	ldi	r24, 0x18	; 24
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	df 01       	movw	r26, r30
     b64:	9c 01       	movw	r18, r24
     b66:	1d 92       	st	X+, r1
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	30 40       	sbci	r19, 0x00	; 0
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <OS_Init+0x1c>
     b6e:	df 01       	movw	r26, r30
     b70:	ad 5f       	subi	r26, 0xFD	; 253
     b72:	be 4f       	sbci	r27, 0xFE	; 254
		Process[x].state = DEAD;
     b74:	1d 92       	st	X+, r1
     b76:	1c 92       	st	X, r1
     b78:	e8 5e       	subi	r30, 0xE8	; 232
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
	int x;
	Tasks = 0;
	KernelActive = 0;
	//Reminder: Clear the memory for the task on creation.
	//Init Kernel data structures
	for (x = 0; x < MAXTHREAD; x++) 
     b7c:	35 e1       	ldi	r19, 0x15	; 21
     b7e:	e8 35       	cpi	r30, 0x58	; 88
     b80:	f3 07       	cpc	r31, r19
     b82:	79 f7       	brne	.-34     	; 0xb62 <OS_Init+0x18>
     b84:	e2 e3       	ldi	r30, 0x32	; 50
     b86:	f3 e0       	ldi	r31, 0x03	; 3
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
	}

	// Init channel data structure
	for (x = 0; x < MAXCHAN; x++) 
	{
		memset(&(Channels[x]), 0, sizeof(CH));
     b8c:	2a e0       	ldi	r18, 0x0A	; 10
     b8e:	df 01       	movw	r26, r30
     b90:	32 2f       	mov	r19, r18
     b92:	1d 92       	st	X+, r1
     b94:	3a 95       	dec	r19
     b96:	e9 f7       	brne	.-6      	; 0xb92 <OS_Init+0x48>
		Channels[x].id = 0;
     b98:	28 9f       	mul	r18, r24
     b9a:	d0 01       	movw	r26, r0
     b9c:	29 9f       	mul	r18, r25
     b9e:	b0 0d       	add	r27, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	ae 5c       	subi	r26, 0xCE	; 206
     ba4:	bc 4f       	sbci	r27, 0xFC	; 252
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	1c 92       	st	X, r1
     baa:	1e 92       	st	-X, r1
		Channels[x].sender = NULL;
     bac:	13 82       	std	Z+3, r1	; 0x03
     bae:	12 82       	std	Z+2, r1	; 0x02
		Channels[x].val = 0;
     bb0:	19 96       	adiw	r26, 0x09	; 9
     bb2:	1c 92       	st	X, r1
     bb4:	1e 92       	st	-X, r1
     bb6:	18 97       	sbiw	r26, 0x08	; 8
		memset(&(Process[x]), 0, sizeof(PD));
		Process[x].state = DEAD;
	}

	// Init channel data structure
	for (x = 0; x < MAXCHAN; x++) 
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	3a 96       	adiw	r30, 0x0a	; 10
     bbc:	80 31       	cpi	r24, 0x10	; 16
     bbe:	91 05       	cpc	r25, r1
     bc0:	31 f7       	brne	.-52     	; 0xb8e <OS_Init+0x44>
		Channels[x].sender = NULL;
		Channels[x].val = 0;
	}
	
	// initialize starting state to ready so that dispatch can be run..
	Cp->state = READY;
     bc2:	e0 91 d6 03 	lds	r30, 0x03D6
     bc6:	f0 91 d7 03 	lds	r31, 0x03D7
     bca:	ed 5f       	subi	r30, 0xFD	; 253
     bcc:	fe 4f       	sbci	r31, 0xFE	; 254
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
	// create idle process
	Task_Create_Idle(Idle, 2);
     bd6:	62 e0       	ldi	r22, 0x02	; 2
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	86 e5       	ldi	r24, 0x56	; 86
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 9d 05 	call	0xb3a	; 0xb3a <Task_Create_Idle>
	Task_Create_System(a_main, 1);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	8e e2       	ldi	r24, 0x2E	; 46
     be8:	97 e0       	ldi	r25, 0x07	; 7
     bea:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <Task_Create_System>

00000bee <Task_Create_RR>:
PID Task_Create_System(void(*f)(void), int arg) {
	Task_Create(f, arg, SYSTEM);
};

PID Task_Create_RR(void(*f)(void), int arg) {
	Task_Create(f, arg, RR);
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	0e 94 6e 05 	call	0xadc	; 0xadc <Task_Create>
};
     bf4:	08 95       	ret

00000bf6 <Task_Next>:
/**
  * The calling task gives up its share of the processor voluntarily.
  */
void Task_Next()
{
	if (KernelActive) 
     bf6:	80 91 d4 03 	lds	r24, 0x03D4
     bfa:	90 91 d5 03 	lds	r25, 0x03D5
     bfe:	89 2b       	or	r24, r25
     c00:	69 f0       	breq	.+26     	; 0xc1c <Task_Next+0x26>
	{
		Disable_Interrupt();
     c02:	f8 94       	cli
		Cp->request = NEXT;
     c04:	e0 91 d6 03 	lds	r30, 0x03D6
     c08:	f0 91 d7 03 	lds	r31, 0x03D7
     c0c:	ee 5e       	subi	r30, 0xEE	; 238
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	84 e0       	ldi	r24, 0x04	; 4
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	91 83       	std	Z+1, r25	; 0x01
     c16:	80 83       	st	Z, r24
		Enter_Kernel();
     c18:	0c 94 01 01 	jmp	0x202	; 0x202 <Enter_Kernel>
     c1c:	08 95       	ret

00000c1e <__vector_32>:


/**
  * Interrupt service routine
  */
ISR(TIMER3_COMPA_vect) {
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	0b b6       	in	r0, 0x3b	; 59
     c2a:	0f 92       	push	r0
     c2c:	2f 93       	push	r18
     c2e:	3f 93       	push	r19
     c30:	4f 93       	push	r20
     c32:	5f 93       	push	r21
     c34:	6f 93       	push	r22
     c36:	7f 93       	push	r23
     c38:	8f 93       	push	r24
     c3a:	9f 93       	push	r25
     c3c:	af 93       	push	r26
     c3e:	bf 93       	push	r27
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
	Disable_Interrupt();
     c44:	f8 94       	cli
	num_ticks++;
     c46:	80 91 00 02 	lds	r24, 0x0200
     c4a:	90 91 01 02 	lds	r25, 0x0201
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	90 93 01 02 	sts	0x0201, r25
     c54:	80 93 00 02 	sts	0x0200, r24
	Cp->request = TIMER_TICK;
     c58:	e0 91 d6 03 	lds	r30, 0x03D6
     c5c:	f0 91 d7 03 	lds	r31, 0x03D7
     c60:	ee 5e       	subi	r30, 0xEE	; 238
     c62:	fe 4f       	sbci	r31, 0xFE	; 254
     c64:	85 e0       	ldi	r24, 0x05	; 5
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	80 83       	st	Z, r24
	Enter_Kernel();
     c6c:	0e 94 01 01 	call	0x202	; 0x202 <Enter_Kernel>
}
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0b be       	out	0x3b, r0	; 59
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	1f 90       	pop	r1
     c94:	18 95       	reti

00000c96 <Chan_Init>:
	}
}

CHAN Chan_Init()
{
	if (KernelActive)
     c96:	80 91 d4 03 	lds	r24, 0x03D4
     c9a:	90 91 d5 03 	lds	r25, 0x03D5
     c9e:	89 2b       	or	r24, r25
     ca0:	71 f0       	breq	.+28     	; 0xcbe <Chan_Init+0x28>
	{
		Disable_Interrupt();
     ca2:	f8 94       	cli
		Cp->request = CREATE_CHANNEL;
     ca4:	e0 91 d6 03 	lds	r30, 0x03D6
     ca8:	f0 91 d7 03 	lds	r31, 0x03D7
     cac:	ee 5e       	subi	r30, 0xEE	; 238
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
		Enter_Kernel();
     cb8:	0e 94 01 01 	call	0x202	; 0x202 <Enter_Kernel>
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <Chan_Init+0x34>
	}
	else 
	{
		kernel_channel_retval = Kernel_Chan_Init();
     cbe:	0e 94 42 03 	call	0x684	; 0x684 <Kernel_Chan_Init>
     cc2:	90 93 03 02 	sts	0x0203, r25
     cc6:	80 93 02 02 	sts	0x0202, r24
	}

	return kernel_channel_retval;
     cca:	80 91 02 02 	lds	r24, 0x0202
     cce:	90 91 03 02 	lds	r25, 0x0203
}
     cd2:	08 95       	ret

00000cd4 <Send>:

}

void Send(CHAN ch, int v)
{
	if (KernelActive)
     cd4:	20 91 d4 03 	lds	r18, 0x03D4
     cd8:	30 91 d5 03 	lds	r19, 0x03D5
     cdc:	23 2b       	or	r18, r19
     cde:	a9 f0       	breq	.+42     	; 0xd0a <Send+0x36>
	{
		Disable_Interrupt();
     ce0:	f8 94       	cli
		Cp->request = SEND;
     ce2:	e0 91 d6 03 	lds	r30, 0x03D6
     ce6:	f0 91 d7 03 	lds	r31, 0x03D7
     cea:	ee 5e       	subi	r30, 0xEE	; 238
     cec:	fe 4f       	sbci	r31, 0xFE	; 254
     cee:	27 e0       	ldi	r18, 0x07	; 7
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	31 83       	std	Z+1, r19	; 0x01
     cf4:	20 83       	st	Z, r18
		channel_buffer.id = ch;
     cf6:	90 93 11 02 	sts	0x0211, r25
     cfa:	80 93 10 02 	sts	0x0210, r24
		channel_buffer.val = v;
     cfe:	70 93 19 02 	sts	0x0219, r23
     d02:	60 93 18 02 	sts	0x0218, r22
		Enter_Kernel();
     d06:	0c 94 01 01 	jmp	0x202	; 0x202 <Enter_Kernel>
     d0a:	08 95       	ret

00000d0c <Recv>:
	}
}

int Recv(CHAN ch)
{
	if (KernelActive)
     d0c:	20 91 d4 03 	lds	r18, 0x03D4
     d10:	30 91 d5 03 	lds	r19, 0x03D5
     d14:	23 2b       	or	r18, r19
     d16:	a9 f0       	breq	.+42     	; 0xd42 <Recv+0x36>
	{
		Disable_Interrupt();
     d18:	f8 94       	cli
		Cp->request = RECV;
     d1a:	e0 91 d6 03 	lds	r30, 0x03D6
     d1e:	f0 91 d7 03 	lds	r31, 0x03D7
     d22:	ee 5e       	subi	r30, 0xEE	; 238
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	28 e0       	ldi	r18, 0x08	; 8
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	31 83       	std	Z+1, r19	; 0x01
     d2c:	20 83       	st	Z, r18
		channel_buffer.id = ch;
     d2e:	90 93 11 02 	sts	0x0211, r25
     d32:	80 93 10 02 	sts	0x0210, r24
		channel_buffer.val = 0;
     d36:	10 92 19 02 	sts	0x0219, r1
     d3a:	10 92 18 02 	sts	0x0218, r1
		Enter_Kernel();
     d3e:	0e 94 01 01 	call	0x202	; 0x202 <Enter_Kernel>
	}

	return Cp->retval;
     d42:	e0 91 d6 03 	lds	r30, 0x03D6
     d46:	f0 91 d7 03 	lds	r31, 0x03D7
     d4a:	ec 5e       	subi	r30, 0xEC	; 236
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
}
     d52:	08 95       	ret

00000d54 <Write>:
	}
}

void Write(CHAN ch, int v)
{
	if (KernelActive)
     d54:	20 91 d4 03 	lds	r18, 0x03D4
     d58:	30 91 d5 03 	lds	r19, 0x03D5
     d5c:	23 2b       	or	r18, r19
     d5e:	a9 f0       	breq	.+42     	; 0xd8a <Write+0x36>
	{
		Disable_Interrupt();
     d60:	f8 94       	cli
		Cp->request = WRITE;
     d62:	e0 91 d6 03 	lds	r30, 0x03D6
     d66:	f0 91 d7 03 	lds	r31, 0x03D7
     d6a:	ee 5e       	subi	r30, 0xEE	; 238
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	29 e0       	ldi	r18, 0x09	; 9
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	31 83       	std	Z+1, r19	; 0x01
     d74:	20 83       	st	Z, r18
		channel_buffer.id = ch;
     d76:	90 93 11 02 	sts	0x0211, r25
     d7a:	80 93 10 02 	sts	0x0210, r24
		channel_buffer.val = v;
     d7e:	70 93 19 02 	sts	0x0219, r23
     d82:	60 93 18 02 	sts	0x0218, r22
		Enter_Kernel();
     d86:	0c 94 01 01 	jmp	0x202	; 0x202 <Enter_Kernel>
     d8a:	08 95       	ret

00000d8c <Now>:
}

unsigned int Now()
{

}
     d8c:	08 95       	ret

00000d8e <init_LED_ON_BOARD>:
 * \date October 2006
 */

void init_LED_ON_BOARD(void)
{
	DDRB |= _BV(LED_ON_BOARD);		//Set LED to output (pins 4 and 5)
     d8e:	27 9a       	sbi	0x04, 7	; 4
	PORTB = 0x00;		//Initialize port to LOW (turn off LEDs)
     d90:	15 b8       	out	0x05, r1	; 5
     d92:	08 95       	ret

00000d94 <init_LED_PING>:
}

void init_LED_PING(void)
{
	DDRB |= _BV(LED_PING);		//Set LED to output (pins 4 and 5)
     d94:	26 9a       	sbi	0x04, 6	; 4
	PORTB = 0x00;		//Initialize port to LOW (turn off LEDs)
     d96:	15 b8       	out	0x05, r1	; 5
     d98:	08 95       	ret

00000d9a <init_LED_ISR>:
}

void init_LED_ISR(void)
{
	DDRB |= _BV(LED_ISR);		//Set LED to output (pins 4 and 5)
     d9a:	25 9a       	sbi	0x04, 5	; 4
	PORTB = 0x00;		//Initialize port to LOW (turn off LEDs)
     d9c:	15 b8       	out	0x05, r1	; 5
     d9e:	08 95       	ret

00000da0 <led_toggle>:
}

void led_toggle(unsigned int mask){
	PORTB ^= _BV(mask) ;		//Initialize port to high
     da0:	95 b1       	in	r25, 0x05	; 5
     da2:	21 e0       	ldi	r18, 0x01	; 1
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	08 2e       	mov	r0, r24
     da8:	01 c0       	rjmp	.+2      	; 0xdac <led_toggle+0xc>
     daa:	22 0f       	add	r18, r18
     dac:	0a 94       	dec	r0
     dae:	ea f7       	brpl	.-6      	; 0xdaa <led_toggle+0xa>
     db0:	92 27       	eor	r25, r18
     db2:	95 b9       	out	0x05, r25	; 5
     db4:	08 95       	ret

00000db6 <enable_LED>:
}


void enable_LED(unsigned int mask)
{
	PORTB |= _BV(mask);		//Initialize port to high
     db6:	95 b1       	in	r25, 0x05	; 5
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	08 2e       	mov	r0, r24
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <enable_LED+0xc>
     dc0:	22 0f       	add	r18, r18
     dc2:	0a 94       	dec	r0
     dc4:	ea f7       	brpl	.-6      	; 0xdc0 <enable_LED+0xa>
     dc6:	92 2b       	or	r25, r18
     dc8:	95 b9       	out	0x05, r25	; 5
     dca:	08 95       	ret

00000dcc <disable_LEDs>:
}

void disable_LEDs(void)
{
	PORTB = 0x00;	//Initialize port to high
     dcc:	15 b8       	out	0x05, r1	; 5
     dce:	08 95       	ret

00000dd0 <Peng>:

void Peng()
{
	for (;;)
	{
		led_toggle(LED_PING);
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>

		Task_Next();
     dd8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Task_Next>
     ddc:	f9 cf       	rjmp	.-14     	; 0xdd0 <Peng>

00000dde <setup>:


volatile CHAN channel_id = 0;

void setup () {
	init_LED_ON_BOARD();
     dde:	0e 94 c7 06 	call	0xd8e	; 0xd8e <init_LED_ON_BOARD>
	init_LED_PING();
     de2:	0e 94 ca 06 	call	0xd94	; 0xd94 <init_LED_PING>
	init_LED_ISR();
     de6:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <init_LED_ISR>

00000dea <Ping>:
 * ============
 */

void Ping() 
{
	int index = 0;
     dea:	c0 e0       	ldi	r28, 0x00	; 0
     dec:	d0 e0       	ldi	r29, 0x00	; 0
	for(;;){
		index++;
		index = index % 1000;
     dee:	08 ee       	ldi	r16, 0xE8	; 232
     df0:	13 e0       	ldi	r17, 0x03	; 3

void Ping() 
{
	int index = 0;
	for(;;){
		index++;
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
		index = index % 1000;
     df6:	b8 01       	movw	r22, r16
     df8:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divmodhi4>
     dfc:	ec 01       	movw	r28, r24

		Send(channel_id, index);
     dfe:	80 91 58 15 	lds	r24, 0x1558
     e02:	90 91 59 15 	lds	r25, 0x1559
     e06:	be 01       	movw	r22, r28
     e08:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Send>
		Task_Next();
     e0c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <Task_Next>
     e10:	f0 cf       	rjmp	.-32     	; 0xdf2 <Ping+0x8>

00000e12 <Pong>:
	}
}
// Pong
void Pong() 
{
	int index = 0;
     e12:	c0 e0       	ldi	r28, 0x00	; 0
     e14:	d0 e0       	ldi	r29, 0x00	; 0
	// disable_LEDs();
	for(;;){
		Send(channel_id, index);
     e16:	80 91 58 15 	lds	r24, 0x1558
     e1a:	90 91 59 15 	lds	r25, 0x1559
     e1e:	be 01       	movw	r22, r28
     e20:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <Send>
		index = Recv(channel_id);
     e24:	80 91 58 15 	lds	r24, 0x1558
     e28:	90 91 59 15 	lds	r25, 0x1559
     e2c:	0e 94 86 06 	call	0xd0c	; 0xd0c <Recv>
     e30:	ec 01       	movw	r28, r24
		if(index == 1){
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	91 05       	cpc	r25, r1
     e36:	79 f7       	brne	.-34     	; 0xe16 <Pong+0x4>
			led_toggle(LED_ON_BOARD);
     e38:	87 e0       	ldi	r24, 0x07	; 7
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     e40:	ea cf       	rjmp	.-44     	; 0xe16 <Pong+0x4>

00000e42 <Pang>:
void Pang() 
{
	int index = 0;
	// disable_LEDs();
	for(;;){
		index = Recv(channel_id);
     e42:	80 91 58 15 	lds	r24, 0x1558
     e46:	90 91 59 15 	lds	r25, 0x1559
     e4a:	0e 94 86 06 	call	0xd0c	; 0xd0c <Recv>
		if(index == 1){
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	c1 f7       	brne	.-16     	; 0xe42 <Pang>
			led_toggle(LED_PING);
     e52:	86 e0       	ldi	r24, 0x06	; 6
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 d0 06 	call	0xda0	; 0xda0 <led_toggle>
     e5a:	f3 cf       	rjmp	.-26     	; 0xe42 <Pang>

00000e5c <a_main>:
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	0e 94 ef 06 	call	0xdde	; 0xdde <setup>
     e64:	0e 94 4b 06 	call	0xc96	; 0xc96 <Chan_Init>
     e68:	90 93 59 15 	sts	0x1559, r25
     e6c:	80 93 58 15 	sts	0x1558, r24
     e70:	00 e0       	ldi	r16, 0x00	; 0
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	4a e0       	ldi	r20, 0x0A	; 10
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	88 ee       	ldi	r24, 0xE8	; 232
     e82:	96 e0       	ldi	r25, 0x06	; 6
     e84:	0e 94 29 05 	call	0xa52	; 0xa52 <Task_Create_Period>
     e88:	21 e0       	ldi	r18, 0x01	; 1
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	4a e0       	ldi	r20, 0x0A	; 10
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	62 e0       	ldi	r22, 0x02	; 2
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	88 ee       	ldi	r24, 0xE8	; 232
     e96:	96 e0       	ldi	r25, 0x06	; 6
     e98:	0e 94 29 05 	call	0xa52	; 0xa52 <Task_Create_Period>
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	08 95       	ret

00000ea2 <Dequeue.isra.0>:
* @brief Pops head of queue and returns it.
*
* @param queue_ptr the queue to pop
* @return the popped task descriptor
*/
static PD* Dequeue(queue_t* queue_ptr)
     ea2:	dc 01       	movw	r26, r24
{
	PD* p = queue_ptr->head;
     ea4:	8d 91       	ld	r24, X+
     ea6:	9c 91       	ld	r25, X
     ea8:	11 97       	sbiw	r26, 0x01	; 1

	if (queue_ptr->head != NULL)
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	49 f0       	breq	.+18     	; 0xec0 <Dequeue.isra.0+0x1e>
	{
		queue_ptr->head = queue_ptr->head->next;
     eae:	fc 01       	movw	r30, r24
     eb0:	ea 5e       	subi	r30, 0xEA	; 234
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	20 81       	ld	r18, Z
     eb6:	31 81       	ldd	r19, Z+1	; 0x01
     eb8:	2d 93       	st	X+, r18
     eba:	3c 93       	st	X, r19
		p->next = NULL;
     ebc:	11 82       	std	Z+1, r1	; 0x01
     ebe:	10 82       	st	Z, r1
	}

	return p;
}
     ec0:	08 95       	ret

00000ec2 <EnqueueTaskToStateQueue.constprop.4>:
		return NULL;
	}
	return Channels[x].id;
}

static void EnqueueTaskToStateQueue(PD* process)
     ec2:	bc 01       	movw	r22, r24
{
	switch (process->level)
     ec4:	fc 01       	movw	r30, r24
     ec6:	e9 5f       	subi	r30, 0xF9	; 249
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	80 81       	ld	r24, Z
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	61 f0       	breq	.+24     	; 0xee8 <EnqueueTaskToStateQueue.constprop.4+0x26>
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	a9 f4       	brne	.+42     	; 0xefe <EnqueueTaskToStateQueue.constprop.4+0x3c>
	{
	case SYSTEM:
		process->state = READY;
     ed4:	fb 01       	movw	r30, r22
     ed6:	ed 5f       	subi	r30, 0xFD	; 253
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
		Enqueue(&system_queue, process);
     ee2:	8c e0       	ldi	r24, 0x0C	; 12
     ee4:	92 e0       	ldi	r25, 0x02	; 2
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <EnqueueTaskToStateQueue.constprop.4+0x38>
		break;
	case RR:
		process->state = READY;
     ee8:	fb 01       	movw	r30, r22
     eea:	ed 5f       	subi	r30, 0xFD	; 253
     eec:	fe 4f       	sbci	r31, 0xFE	; 254
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24
		Enqueue(&rr_queue, process);
     ef6:	88 e0       	ldi	r24, 0x08	; 8
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <Enqueue>
     efe:	08 95       	ret

00000f00 <Kernel_Dispatch>:
  * next task to run, i.e., Cp.
  */
static void Kernel_Dispatch()
{
	// find the next READY task 
	if (Cp->state != RUNNING || Cp == idle_process)
     f00:	80 91 d6 03 	lds	r24, 0x03D6
     f04:	90 91 d7 03 	lds	r25, 0x03D7
     f08:	fc 01       	movw	r30, r24
     f0a:	ed 5f       	subi	r30, 0xFD	; 253
     f0c:	fe 4f       	sbci	r31, 0xFE	; 254
     f0e:	20 81       	ld	r18, Z
     f10:	31 81       	ldd	r19, Z+1	; 0x01
     f12:	21 30       	cpi	r18, 0x01	; 1
     f14:	31 05       	cpc	r19, r1
     f16:	41 f4       	brne	.+16     	; 0xf28 <Kernel_Dispatch+0x28>
     f18:	20 91 5e 15 	lds	r18, 0x155E
     f1c:	30 91 5f 15 	lds	r19, 0x155F
     f20:	82 17       	cp	r24, r18
     f22:	93 07       	cpc	r25, r19
     f24:	09 f0       	breq	.+2      	; 0xf28 <Kernel_Dispatch+0x28>
     f26:	61 c0       	rjmp	.+194    	; 0xfea <Kernel_Dispatch+0xea>
	{
		if (system_queue.head != NULL)
     f28:	80 91 0c 02 	lds	r24, 0x020C
     f2c:	90 91 0d 02 	lds	r25, 0x020D
     f30:	89 2b       	or	r24, r25
     f32:	19 f0       	breq	.+6      	; 0xf3a <Kernel_Dispatch+0x3a>
		{
			Cp = Dequeue(&system_queue);
     f34:	8c e0       	ldi	r24, 0x0C	; 12
     f36:	92 e0       	ldi	r25, 0x02	; 2
     f38:	3a c0       	rjmp	.+116    	; 0xfae <Kernel_Dispatch+0xae>
		}
		else if(periodic_queue.head != NULL && (int)(num_ticks - periodic_queue.head->next_start) >= 0)
     f3a:	80 91 04 02 	lds	r24, 0x0204
     f3e:	90 91 05 02 	lds	r25, 0x0205
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	61 f1       	breq	.+88     	; 0xf9e <Kernel_Dispatch+0x9e>
     f46:	20 91 00 02 	lds	r18, 0x0200
     f4a:	30 91 01 02 	lds	r19, 0x0201
     f4e:	fc 01       	movw	r30, r24
     f50:	e6 5f       	subi	r30, 0xF6	; 246
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	40 81       	ld	r20, Z
     f56:	51 81       	ldd	r21, Z+1	; 0x01
     f58:	24 1b       	sub	r18, r20
     f5a:	35 0b       	sbc	r19, r21
     f5c:	37 fd       	sbrc	r19, 7
     f5e:	1f c0       	rjmp	.+62     	; 0xf9e <Kernel_Dispatch+0x9e>
		{
			// Timing conflict with another periodic task
			if (periodic_queue.head->next != NULL && (int)(num_ticks - periodic_queue.head->next->next_start) >= 0)
     f60:	fc 01       	movw	r30, r24
     f62:	ea 5e       	subi	r30, 0xEA	; 234
     f64:	fe 4f       	sbci	r31, 0xFE	; 254
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	89 2b       	or	r24, r25
     f6c:	99 f0       	breq	.+38     	; 0xf94 <Kernel_Dispatch+0x94>
     f6e:	80 91 00 02 	lds	r24, 0x0200
     f72:	90 91 01 02 	lds	r25, 0x0201
     f76:	01 90       	ld	r0, Z+
     f78:	f0 81       	ld	r31, Z
     f7a:	e0 2d       	mov	r30, r0
     f7c:	e6 5f       	subi	r30, 0xF6	; 246
     f7e:	fe 4f       	sbci	r31, 0xFE	; 254
     f80:	20 81       	ld	r18, Z
     f82:	31 81       	ldd	r19, Z+1	; 0x01
     f84:	82 1b       	sub	r24, r18
     f86:	93 0b       	sbc	r25, r19
     f88:	97 fd       	sbrc	r25, 7
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <Kernel_Dispatch+0x94>
			{
				OS_Abort(PERIODIC_TASK_TIMING_CONFLICT);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 6d 02 	call	0x4da	; 0x4da <OS_Abort>
			}	
			Cp = periodic_queue.head;						
     f94:	80 91 04 02 	lds	r24, 0x0204
     f98:	90 91 05 02 	lds	r25, 0x0205
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <Kernel_Dispatch+0xbc>
		}
		else if (rr_queue.head != NULL)
     f9e:	80 91 08 02 	lds	r24, 0x0208
     fa2:	90 91 09 02 	lds	r25, 0x0209
     fa6:	89 2b       	or	r24, r25
     fa8:	29 f0       	breq	.+10     	; 0xfb4 <Kernel_Dispatch+0xb4>
		{
			Cp = Dequeue(&rr_queue);
     faa:	88 e0       	ldi	r24, 0x08	; 8
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0e 94 51 07 	call	0xea2	; 0xea2 <Dequeue.isra.0>
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <Kernel_Dispatch+0xbc>
		}
		else 
		{
			Cp = idle_process;
     fb4:	80 91 5e 15 	lds	r24, 0x155E
     fb8:	90 91 5f 15 	lds	r25, 0x155F
     fbc:	90 93 d7 03 	sts	0x03D7, r25
     fc0:	80 93 d6 03 	sts	0x03D6, r24
		}
		CurrentSp = Cp->sp;
     fc4:	80 91 d6 03 	lds	r24, 0x03D6
     fc8:	90 91 d7 03 	lds	r25, 0x03D7
     fcc:	fc 01       	movw	r30, r24
     fce:	f3 95       	inc	r31
     fd0:	20 81       	ld	r18, Z
     fd2:	31 81       	ldd	r19, Z+1	; 0x01
     fd4:	30 93 61 15 	sts	0x1561, r19
     fd8:	20 93 60 15 	sts	0x1560, r18
		Cp->state = RUNNING;
     fdc:	fc 01       	movw	r30, r24
     fde:	ed 5f       	subi	r30, 0xFD	; 253
     fe0:	fe 4f       	sbci	r31, 0xFE	; 254
     fe2:	21 e0       	ldi	r18, 0x01	; 1
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	31 83       	std	Z+1, r19	; 0x01
     fe8:	20 83       	st	Z, r18
     fea:	08 95       	ret

00000fec <main>:
	* This function creates two cooperative tasks, "Ping" and "Pong". Both
	* will run forever.
	*/
void main()
{
	OS_Init();
     fec:	0e 94 a5 05 	call	0xb4a	; 0xb4a <OS_Init>
	OS_Start();
     ff0:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <OS_Start>

00000ff4 <__divmodhi4>:
     ff4:	97 fb       	bst	r25, 7
     ff6:	07 2e       	mov	r0, r23
     ff8:	16 f4       	brtc	.+4      	; 0xffe <__divmodhi4+0xa>
     ffa:	00 94       	com	r0
     ffc:	07 d0       	rcall	.+14     	; 0x100c <__divmodhi4_neg1>
     ffe:	77 fd       	sbrc	r23, 7
    1000:	09 d0       	rcall	.+18     	; 0x1014 <__divmodhi4_neg2>
    1002:	0e 94 14 08 	call	0x1028	; 0x1028 <__udivmodhi4>
    1006:	07 fc       	sbrc	r0, 7
    1008:	05 d0       	rcall	.+10     	; 0x1014 <__divmodhi4_neg2>
    100a:	3e f4       	brtc	.+14     	; 0x101a <__divmodhi4_exit>

0000100c <__divmodhi4_neg1>:
    100c:	90 95       	com	r25
    100e:	81 95       	neg	r24
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	08 95       	ret

00001014 <__divmodhi4_neg2>:
    1014:	70 95       	com	r23
    1016:	61 95       	neg	r22
    1018:	7f 4f       	sbci	r23, 0xFF	; 255

0000101a <__divmodhi4_exit>:
    101a:	08 95       	ret

0000101c <__tablejump2__>:
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31

00001020 <__tablejump__>:
    1020:	05 90       	lpm	r0, Z+
    1022:	f4 91       	lpm	r31, Z
    1024:	e0 2d       	mov	r30, r0
    1026:	19 94       	eijmp

00001028 <__udivmodhi4>:
    1028:	aa 1b       	sub	r26, r26
    102a:	bb 1b       	sub	r27, r27
    102c:	51 e1       	ldi	r21, 0x11	; 17
    102e:	07 c0       	rjmp	.+14     	; 0x103e <__udivmodhi4_ep>

00001030 <__udivmodhi4_loop>:
    1030:	aa 1f       	adc	r26, r26
    1032:	bb 1f       	adc	r27, r27
    1034:	a6 17       	cp	r26, r22
    1036:	b7 07       	cpc	r27, r23
    1038:	10 f0       	brcs	.+4      	; 0x103e <__udivmodhi4_ep>
    103a:	a6 1b       	sub	r26, r22
    103c:	b7 0b       	sbc	r27, r23

0000103e <__udivmodhi4_ep>:
    103e:	88 1f       	adc	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	5a 95       	dec	r21
    1044:	a9 f7       	brne	.-22     	; 0x1030 <__udivmodhi4_loop>
    1046:	80 95       	com	r24
    1048:	90 95       	com	r25
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	08 95       	ret

00001050 <_exit>:
    1050:	f8 94       	cli

00001052 <__stop_program>:
    1052:	ff cf       	rjmp	.-2      	; 0x1052 <__stop_program>
